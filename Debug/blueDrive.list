
blueDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e64  08004e64  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e6c  08004e6c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e6c  08004e6c  00014e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001dc  08005050  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08005050  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f642  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022cd  00000000  00000000  0002f84e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  00031b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  000327b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000175b7  00000000  00000000  00033328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b18e  00000000  00000000  0004a8df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d482  00000000  00000000  00055a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2eef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e0  00000000  00000000  000e2f6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c68 	.word	0x08004c68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08004c68 	.word	0x08004c68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <display>:
 */
#include "bluetooth.h"

// Conversion d'un int en string pour l'afficher sur le terminal
void display(int value)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	char msg[10];
	sprintf(msg, "%hu\r\n", value);
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	490b      	ldr	r1, [pc, #44]	; (80005cc <display+0x3c>)
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 fe9d 	bl	80042e0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fe18 	bl	80001e0 <strlen>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f107 010c 	add.w	r1, r7, #12
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <display+0x40>)
 80005be:	f002 ff6e 	bl	800349e <HAL_UART_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	08004c80 	.word	0x08004c80
 80005d0:	20000358 	.word	0x20000358

080005d4 <string_compare>:

// Permet de comparer deux chaines de caracteres
// Retourne -> 1 si elles sont identiques
//             0 si elles sont différentes
uint8_t string_compare(char msg1[], char msg2[], uint16_t length)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	4613      	mov	r3, r2
 80005e0:	80fb      	strh	r3, [r7, #6]
	uint8_t compare = 0, i;
 80005e2:	2300      	movs	r3, #0
 80005e4:	75fb      	strb	r3, [r7, #23]
	for(i=0; i<length; i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	75bb      	strb	r3, [r7, #22]
 80005ea:	e00f      	b.n	800060c <string_compare+0x38>
	{
		if(msg1[i]==msg2[i])
 80005ec:	7dbb      	ldrb	r3, [r7, #22]
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	4413      	add	r3, r2
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	7dbb      	ldrb	r3, [r7, #22]
 80005f6:	68b9      	ldr	r1, [r7, #8]
 80005f8:	440b      	add	r3, r1
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d102      	bne.n	8000606 <string_compare+0x32>
		{
			compare++;
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	3301      	adds	r3, #1
 8000604:	75fb      	strb	r3, [r7, #23]
	for(i=0; i<length; i++)
 8000606:	7dbb      	ldrb	r3, [r7, #22]
 8000608:	3301      	adds	r3, #1
 800060a:	75bb      	strb	r3, [r7, #22]
 800060c:	7dbb      	ldrb	r3, [r7, #22]
 800060e:	b29b      	uxth	r3, r3
 8000610:	88fa      	ldrh	r2, [r7, #6]
 8000612:	429a      	cmp	r2, r3
 8000614:	d8ea      	bhi.n	80005ec <string_compare+0x18>
		}
	}
	if(compare==length)
 8000616:	7dfb      	ldrb	r3, [r7, #23]
 8000618:	b29b      	uxth	r3, r3
 800061a:	88fa      	ldrh	r2, [r7, #6]
 800061c:	429a      	cmp	r2, r3
 800061e:	d101      	bne.n	8000624 <string_compare+0x50>
	{ return 1; }
 8000620:	2301      	movs	r3, #1
 8000622:	e000      	b.n	8000626 <string_compare+0x52>
	else
	{ return 0; }
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	371c      	adds	r7, #28
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <car_command>:


// On appel cette fonction à chaque fois que l'on reçoit des données via bluetooth
// Cette fonction sert à traiter ces données pour piloter la voiture
void car_command()
{
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "vit", strlen("vit")))
 8000638:	2203      	movs	r2, #3
 800063a:	497b      	ldr	r1, [pc, #492]	; (8000828 <car_command+0x1f4>)
 800063c:	487b      	ldr	r0, [pc, #492]	; (800082c <car_command+0x1f8>)
 800063e:	f7ff ffc9 	bl	80005d4 <string_compare>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d021      	beq.n	800068c <car_command+0x58>
	{
		vitesse_M();
 8000648:	f000 f900 	bl	800084c <vitesse_M>
		strcat(buffer,"est la fonction appelee \n");
 800064c:	4877      	ldr	r0, [pc, #476]	; (800082c <car_command+0x1f8>)
 800064e:	f7ff fdc7 	bl	80001e0 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	4b75      	ldr	r3, [pc, #468]	; (800082c <car_command+0x1f8>)
 8000658:	4413      	add	r3, r2
 800065a:	4a75      	ldr	r2, [pc, #468]	; (8000830 <car_command+0x1fc>)
 800065c:	461d      	mov	r5, r3
 800065e:	4614      	mov	r4, r2
 8000660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000662:	6028      	str	r0, [r5, #0]
 8000664:	6069      	str	r1, [r5, #4]
 8000666:	60aa      	str	r2, [r5, #8]
 8000668:	60eb      	str	r3, [r5, #12]
 800066a:	cc03      	ldmia	r4!, {r0, r1}
 800066c:	6128      	str	r0, [r5, #16]
 800066e:	6169      	str	r1, [r5, #20]
 8000670:	8823      	ldrh	r3, [r4, #0]
 8000672:	832b      	strh	r3, [r5, #24]
		HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer), 1000); // via moniteur série
 8000674:	486d      	ldr	r0, [pc, #436]	; (800082c <car_command+0x1f8>)
 8000676:	f7ff fdb3 	bl	80001e0 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	b29a      	uxth	r2, r3
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	496a      	ldr	r1, [pc, #424]	; (800082c <car_command+0x1f8>)
 8000684:	486b      	ldr	r0, [pc, #428]	; (8000834 <car_command+0x200>)
 8000686:	f002 ff0a 	bl	800349e <HAL_UART_Transmit>
	}else
	{	// Permet d'observer le message reçu
		strcat(buffer,"est le message recu (aucune fonction appelee) \n");
		HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer), 500); // via le moniteur série
	}
}
 800068a:	e0ca      	b.n	8000822 <car_command+0x1ee>
	if(string_compare(buffer,"an", strlen("an")))
 800068c:	2202      	movs	r2, #2
 800068e:	496a      	ldr	r1, [pc, #424]	; (8000838 <car_command+0x204>)
 8000690:	4866      	ldr	r0, [pc, #408]	; (800082c <car_command+0x1f8>)
 8000692:	f7ff ff9f 	bl	80005d4 <string_compare>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d021      	beq.n	80006e0 <car_command+0xac>
		servo_M();
 800069c:	f000 f906 	bl	80008ac <servo_M>
		strcat(buffer,"est la fonction appelee \n");
 80006a0:	4862      	ldr	r0, [pc, #392]	; (800082c <car_command+0x1f8>)
 80006a2:	f7ff fd9d 	bl	80001e0 <strlen>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b60      	ldr	r3, [pc, #384]	; (800082c <car_command+0x1f8>)
 80006ac:	4413      	add	r3, r2
 80006ae:	4a60      	ldr	r2, [pc, #384]	; (8000830 <car_command+0x1fc>)
 80006b0:	461d      	mov	r5, r3
 80006b2:	4614      	mov	r4, r2
 80006b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b6:	6028      	str	r0, [r5, #0]
 80006b8:	6069      	str	r1, [r5, #4]
 80006ba:	60aa      	str	r2, [r5, #8]
 80006bc:	60eb      	str	r3, [r5, #12]
 80006be:	cc03      	ldmia	r4!, {r0, r1}
 80006c0:	6128      	str	r0, [r5, #16]
 80006c2:	6169      	str	r1, [r5, #20]
 80006c4:	8823      	ldrh	r3, [r4, #0]
 80006c6:	832b      	strh	r3, [r5, #24]
		HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer), 500); // via moniteur série
 80006c8:	4858      	ldr	r0, [pc, #352]	; (800082c <car_command+0x1f8>)
 80006ca:	f7ff fd89 	bl	80001e0 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006d6:	4955      	ldr	r1, [pc, #340]	; (800082c <car_command+0x1f8>)
 80006d8:	4856      	ldr	r0, [pc, #344]	; (8000834 <car_command+0x200>)
 80006da:	f002 fee0 	bl	800349e <HAL_UART_Transmit>
}
 80006de:	e0a0      	b.n	8000822 <car_command+0x1ee>
	if(string_compare(buffer, "klaxon", strlen("klaxon"))) // Si on reçoit "klaxon"
 80006e0:	2206      	movs	r2, #6
 80006e2:	4956      	ldr	r1, [pc, #344]	; (800083c <car_command+0x208>)
 80006e4:	4851      	ldr	r0, [pc, #324]	; (800082c <car_command+0x1f8>)
 80006e6:	f7ff ff75 	bl	80005d4 <string_compare>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d021      	beq.n	8000734 <car_command+0x100>
		klaxon();
 80006f0:	f000 f960 	bl	80009b4 <klaxon>
		strcat(buffer,"est la fonction appelee \n");
 80006f4:	484d      	ldr	r0, [pc, #308]	; (800082c <car_command+0x1f8>)
 80006f6:	f7ff fd73 	bl	80001e0 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b4b      	ldr	r3, [pc, #300]	; (800082c <car_command+0x1f8>)
 8000700:	4413      	add	r3, r2
 8000702:	4a4b      	ldr	r2, [pc, #300]	; (8000830 <car_command+0x1fc>)
 8000704:	461d      	mov	r5, r3
 8000706:	4614      	mov	r4, r2
 8000708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070a:	6028      	str	r0, [r5, #0]
 800070c:	6069      	str	r1, [r5, #4]
 800070e:	60aa      	str	r2, [r5, #8]
 8000710:	60eb      	str	r3, [r5, #12]
 8000712:	cc03      	ldmia	r4!, {r0, r1}
 8000714:	6128      	str	r0, [r5, #16]
 8000716:	6169      	str	r1, [r5, #20]
 8000718:	8823      	ldrh	r3, [r4, #0]
 800071a:	832b      	strh	r3, [r5, #24]
		HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer), 500); // via moniteur série
 800071c:	4843      	ldr	r0, [pc, #268]	; (800082c <car_command+0x1f8>)
 800071e:	f7ff fd5f 	bl	80001e0 <strlen>
 8000722:	4603      	mov	r3, r0
 8000724:	b29a      	uxth	r2, r3
 8000726:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800072a:	4940      	ldr	r1, [pc, #256]	; (800082c <car_command+0x1f8>)
 800072c:	4841      	ldr	r0, [pc, #260]	; (8000834 <car_command+0x200>)
 800072e:	f002 feb6 	bl	800349e <HAL_UART_Transmit>
}
 8000732:	e076      	b.n	8000822 <car_command+0x1ee>
	if((string_compare(buffer, "clign",strlen("clign"))))  // Si on recoit "clign"
 8000734:	2205      	movs	r2, #5
 8000736:	4942      	ldr	r1, [pc, #264]	; (8000840 <car_command+0x20c>)
 8000738:	483c      	ldr	r0, [pc, #240]	; (800082c <car_command+0x1f8>)
 800073a:	f7ff ff4b 	bl	80005d4 <string_compare>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d021      	beq.n	8000788 <car_command+0x154>
		cligno();
 8000744:	f000 f93e 	bl	80009c4 <cligno>
		strcat(buffer,"est la fonction appelee \n");
 8000748:	4838      	ldr	r0, [pc, #224]	; (800082c <car_command+0x1f8>)
 800074a:	f7ff fd49 	bl	80001e0 <strlen>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	4b36      	ldr	r3, [pc, #216]	; (800082c <car_command+0x1f8>)
 8000754:	4413      	add	r3, r2
 8000756:	4a36      	ldr	r2, [pc, #216]	; (8000830 <car_command+0x1fc>)
 8000758:	461d      	mov	r5, r3
 800075a:	4614      	mov	r4, r2
 800075c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800075e:	6028      	str	r0, [r5, #0]
 8000760:	6069      	str	r1, [r5, #4]
 8000762:	60aa      	str	r2, [r5, #8]
 8000764:	60eb      	str	r3, [r5, #12]
 8000766:	cc03      	ldmia	r4!, {r0, r1}
 8000768:	6128      	str	r0, [r5, #16]
 800076a:	6169      	str	r1, [r5, #20]
 800076c:	8823      	ldrh	r3, [r4, #0]
 800076e:	832b      	strh	r3, [r5, #24]
		HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer), 500); // via moniteur série
 8000770:	482e      	ldr	r0, [pc, #184]	; (800082c <car_command+0x1f8>)
 8000772:	f7ff fd35 	bl	80001e0 <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800077e:	492b      	ldr	r1, [pc, #172]	; (800082c <car_command+0x1f8>)
 8000780:	482c      	ldr	r0, [pc, #176]	; (8000834 <car_command+0x200>)
 8000782:	f002 fe8c 	bl	800349e <HAL_UART_Transmit>
}
 8000786:	e04c      	b.n	8000822 <car_command+0x1ee>
	if(string_compare(buffer, "phares",strlen("phares")))
 8000788:	2206      	movs	r2, #6
 800078a:	492e      	ldr	r1, [pc, #184]	; (8000844 <car_command+0x210>)
 800078c:	4827      	ldr	r0, [pc, #156]	; (800082c <car_command+0x1f8>)
 800078e:	f7ff ff21 	bl	80005d4 <string_compare>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d021      	beq.n	80007dc <car_command+0x1a8>
		phares();
 8000798:	f000 f96e 	bl	8000a78 <phares>
		strcat(buffer,"est la fonction appelee \n");
 800079c:	4823      	ldr	r0, [pc, #140]	; (800082c <car_command+0x1f8>)
 800079e:	f7ff fd1f 	bl	80001e0 <strlen>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <car_command+0x1f8>)
 80007a8:	4413      	add	r3, r2
 80007aa:	4a21      	ldr	r2, [pc, #132]	; (8000830 <car_command+0x1fc>)
 80007ac:	461d      	mov	r5, r3
 80007ae:	4614      	mov	r4, r2
 80007b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b2:	6028      	str	r0, [r5, #0]
 80007b4:	6069      	str	r1, [r5, #4]
 80007b6:	60aa      	str	r2, [r5, #8]
 80007b8:	60eb      	str	r3, [r5, #12]
 80007ba:	cc03      	ldmia	r4!, {r0, r1}
 80007bc:	6128      	str	r0, [r5, #16]
 80007be:	6169      	str	r1, [r5, #20]
 80007c0:	8823      	ldrh	r3, [r4, #0]
 80007c2:	832b      	strh	r3, [r5, #24]
		HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer), 500); // via moniteur série
 80007c4:	4819      	ldr	r0, [pc, #100]	; (800082c <car_command+0x1f8>)
 80007c6:	f7ff fd0b 	bl	80001e0 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007d2:	4916      	ldr	r1, [pc, #88]	; (800082c <car_command+0x1f8>)
 80007d4:	4817      	ldr	r0, [pc, #92]	; (8000834 <car_command+0x200>)
 80007d6:	f002 fe62 	bl	800349e <HAL_UART_Transmit>
}
 80007da:	e022      	b.n	8000822 <car_command+0x1ee>
		strcat(buffer,"est le message recu (aucune fonction appelee) \n");
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <car_command+0x1f8>)
 80007de:	f7ff fcff 	bl	80001e0 <strlen>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <car_command+0x1f8>)
 80007e8:	4413      	add	r3, r2
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <car_command+0x214>)
 80007ec:	4614      	mov	r4, r2
 80007ee:	469c      	mov	ip, r3
 80007f0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80007f4:	4665      	mov	r5, ip
 80007f6:	4626      	mov	r6, r4
 80007f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007fa:	6028      	str	r0, [r5, #0]
 80007fc:	6069      	str	r1, [r5, #4]
 80007fe:	60aa      	str	r2, [r5, #8]
 8000800:	60eb      	str	r3, [r5, #12]
 8000802:	3410      	adds	r4, #16
 8000804:	f10c 0c10 	add.w	ip, ip, #16
 8000808:	4574      	cmp	r4, lr
 800080a:	d1f3      	bne.n	80007f4 <car_command+0x1c0>
		HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer), 500); // via le moniteur série
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <car_command+0x1f8>)
 800080e:	f7ff fce7 	bl	80001e0 <strlen>
 8000812:	4603      	mov	r3, r0
 8000814:	b29a      	uxth	r2, r3
 8000816:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800081a:	4904      	ldr	r1, [pc, #16]	; (800082c <car_command+0x1f8>)
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <car_command+0x200>)
 800081e:	f002 fe3e 	bl	800349e <HAL_UART_Transmit>
}
 8000822:	bf00      	nop
 8000824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000826:	bf00      	nop
 8000828:	08004c88 	.word	0x08004c88
 800082c:	20000214 	.word	0x20000214
 8000830:	08004c8c 	.word	0x08004c8c
 8000834:	20000358 	.word	0x20000358
 8000838:	08004ca8 	.word	0x08004ca8
 800083c:	08004cac 	.word	0x08004cac
 8000840:	08004cb4 	.word	0x08004cb4
 8000844:	08004cbc 	.word	0x08004cbc
 8000848:	08004cc4 	.word	0x08004cc4

0800084c <vitesse_M>:
// "vi1000"
// "vi 100"
// "vi  10"
// Commence à rouler pour vit300
void vitesse_M()
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b090      	sub	sp, #64	; 0x40
 8000850:	af00      	add	r7, sp, #0
	int pwm_value;
	char buffer_vitesse[50];
	for(int i=3; i<strlen("vit 100"); i++){
 8000852:	2303      	movs	r3, #3
 8000854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000856:	e00d      	b.n	8000874 <vitesse_M+0x28>
		buffer_vitesse[i-3] = buffer[i];
 8000858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800085a:	3b03      	subs	r3, #3
 800085c:	4911      	ldr	r1, [pc, #68]	; (80008a4 <vitesse_M+0x58>)
 800085e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000860:	440a      	add	r2, r1
 8000862:	7812      	ldrb	r2, [r2, #0]
 8000864:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000868:	440b      	add	r3, r1
 800086a:	f803 2c3c 	strb.w	r2, [r3, #-60]
	for(int i=3; i<strlen("vit 100"); i++){
 800086e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000870:	3301      	adds	r3, #1
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000876:	2b06      	cmp	r3, #6
 8000878:	d9ee      	bls.n	8000858 <vitesse_M+0xc>
	}
	pwm_value = (atoi(buffer_vitesse)*10);
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fcf9 	bl	8004274 <atoi>
 8000882:	4602      	mov	r2, r0
 8000884:	4613      	mov	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <vitesse_M+0x5c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
	display(pwm_value);
 8000896:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000898:	f7ff fe7a 	bl	8000590 <display>
}
 800089c:	bf00      	nop
 800089e:	3740      	adds	r7, #64	; 0x40
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000214 	.word	0x20000214
 80008a8:	200002d8 	.word	0x200002d8

080008ac <servo_M>:

// Le servo-moteur pivote de -90° à +90°
// -90° -> pwm_value = 30
// +90° -> pmw_value = 120
void servo_M()  // conversion à faire
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b090      	sub	sp, #64	; 0x40
 80008b0:	af00      	add	r7, sp, #0
	int pwm_value;
	char buffer_direction[50];

	for(int i=3; i<strlen("dir100"); i++)
 80008b2:	2303      	movs	r3, #3
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80008b6:	e00d      	b.n	80008d4 <servo_M+0x28>
	{
		buffer_direction[i-3] = buffer[i];
 80008b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008ba:	3b03      	subs	r3, #3
 80008bc:	4925      	ldr	r1, [pc, #148]	; (8000954 <servo_M+0xa8>)
 80008be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80008c0:	440a      	add	r2, r1
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80008c8:	440b      	add	r3, r1
 80008ca:	f803 2c3c 	strb.w	r2, [r3, #-60]
	for(int i=3; i<strlen("dir100"); i++)
 80008ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d0:	3301      	adds	r3, #1
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80008d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d6:	2b05      	cmp	r3, #5
 80008d8:	d9ee      	bls.n	80008b8 <servo_M+0xc>
	}
	pwm_value = atoi(buffer_direction);
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fcc9 	bl	8004274 <atoi>
 80008e2:	63f8      	str	r0, [r7, #60]	; 0x3c

	if((pwm_value>0)&&(pwm_value<=180)){
 80008e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	dd12      	ble.n	8000910 <servo_M+0x64>
 80008ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008ec:	2bb4      	cmp	r3, #180	; 0xb4
 80008ee:	dc0f      	bgt.n	8000910 <servo_M+0x64>
		sens_moteur(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f000 f835 	bl	8000960 <sens_moteur>
		pwm_value = pwm_value*110/180;
 80008f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f8:	226e      	movs	r2, #110	; 0x6e
 80008fa:	fb02 f303 	mul.w	r3, r2, r3
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <servo_M+0xac>)
 8000900:	fb82 1203 	smull	r1, r2, r2, r3
 8000904:	441a      	add	r2, r3
 8000906:	11d2      	asrs	r2, r2, #7
 8000908:	17db      	asrs	r3, r3, #31
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800090e:	e016      	b.n	800093e <servo_M+0x92>
	}
	else if((pwm_value>180)&&(pwm_value<=360)){
 8000910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000912:	2bb4      	cmp	r3, #180	; 0xb4
 8000914:	dd13      	ble.n	800093e <servo_M+0x92>
 8000916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000918:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800091c:	dc0f      	bgt.n	800093e <servo_M+0x92>
		sens_moteur(0);
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f81e 	bl	8000960 <sens_moteur>
		pwm_value = (pwm_value-180)*110/180;
 8000924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000926:	3bb4      	subs	r3, #180	; 0xb4
 8000928:	226e      	movs	r2, #110	; 0x6e
 800092a:	fb02 f303 	mul.w	r3, r2, r3
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <servo_M+0xac>)
 8000930:	fb82 1203 	smull	r1, r2, r2, r3
 8000934:	441a      	add	r2, r3
 8000936:	11d2      	asrs	r2, r2, #7
 8000938:	17db      	asrs	r3, r3, #31
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value);
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <servo_M+0xb0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000944:	639a      	str	r2, [r3, #56]	; 0x38
	display(pwm_value);
 8000946:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000948:	f7ff fe22 	bl	8000590 <display>
}
 800094c:	bf00      	nop
 800094e:	3740      	adds	r7, #64	; 0x40
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000214 	.word	0x20000214
 8000958:	b60b60b7 	.word	0xb60b60b7
 800095c:	20000318 	.word	0x20000318

08000960 <sens_moteur>:


// PC7  = D9 = sens1
// PB10 = D6 = sens2
void sens_moteur(int sens)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	if(sens == 1){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d10b      	bne.n	8000986 <sens_moteur+0x26>
		HAL_GPIO_WritePin(sens1_GPIO_Port, sens1_Pin, RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	480e      	ldr	r0, [pc, #56]	; (80009ac <sens_moteur+0x4c>)
 8000974:	f001 f9bc 	bl	8001cf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sens2_GPIO_Port, sens2_Pin, SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <sens_moteur+0x50>)
 8000980:	f001 f9b6 	bl	8001cf0 <HAL_GPIO_WritePin>
	}
	else if(sens == 0){
		HAL_GPIO_WritePin(sens1_GPIO_Port, sens1_Pin, SET);
		HAL_GPIO_WritePin(sens2_GPIO_Port, sens2_Pin, RESET);
	}
}
 8000984:	e00d      	b.n	80009a2 <sens_moteur+0x42>
	else if(sens == 0){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10a      	bne.n	80009a2 <sens_moteur+0x42>
		HAL_GPIO_WritePin(sens1_GPIO_Port, sens1_Pin, SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <sens_moteur+0x4c>)
 8000992:	f001 f9ad 	bl	8001cf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sens2_GPIO_Port, sens2_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <sens_moteur+0x50>)
 800099e:	f001 f9a7 	bl	8001cf0 <HAL_GPIO_WritePin>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020400 	.word	0x40020400

080009b4 <klaxon>:

void klaxon()
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <cligno>:


// On utilise le timer 3 en interruption pour cette fonction (cf TIM3_IRQHandler)
void cligno()
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	position_clign_before = position_clign;
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <cligno+0x94>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <cligno+0x98>)
 80009ce:	6013      	str	r3, [r2, #0]
	// Choix du clignotant
	if(string_compare(buffer, "cligno", strlen("cligno")))
 80009d0:	2206      	movs	r2, #6
 80009d2:	4923      	ldr	r1, [pc, #140]	; (8000a60 <cligno+0x9c>)
 80009d4:	4823      	ldr	r0, [pc, #140]	; (8000a64 <cligno+0xa0>)
 80009d6:	f7ff fdfd 	bl	80005d4 <string_compare>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <cligno+0x24>
	{
		position_clign = 1;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <cligno+0x94>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e016      	b.n	8000a16 <cligno+0x52>
	}
	else if(string_compare(buffer, "clignD", strlen("clignD")))
 80009e8:	2206      	movs	r2, #6
 80009ea:	491f      	ldr	r1, [pc, #124]	; (8000a68 <cligno+0xa4>)
 80009ec:	481d      	ldr	r0, [pc, #116]	; (8000a64 <cligno+0xa0>)
 80009ee:	f7ff fdf1 	bl	80005d4 <string_compare>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d003      	beq.n	8000a00 <cligno+0x3c>
	{
		position_clign = 2;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <cligno+0x94>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	e00a      	b.n	8000a16 <cligno+0x52>
	}
	else if(string_compare(buffer, "clignG", strlen("clignG")))
 8000a00:	2206      	movs	r2, #6
 8000a02:	491a      	ldr	r1, [pc, #104]	; (8000a6c <cligno+0xa8>)
 8000a04:	4817      	ldr	r0, [pc, #92]	; (8000a64 <cligno+0xa0>)
 8000a06:	f7ff fde5 	bl	80005d4 <string_compare>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <cligno+0x52>
	{
		position_clign = 3;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <cligno+0x94>)
 8000a12:	2203      	movs	r2, #3
 8000a14:	601a      	str	r2, [r3, #0]
	}

	// Activation ou non du mode clignotant
	if(active_clign == 0)
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <cligno+0xac>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d103      	bne.n	8000a26 <cligno+0x62>
	{
		active_clign = 1;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <cligno+0xac>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
		if(position_clign == position_clign_before)
		{
			active_clign = 0;
		}
	}
}
 8000a24:	e016      	b.n	8000a54 <cligno+0x90>
	else if (active_clign == 1)
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <cligno+0xac>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d112      	bne.n	8000a54 <cligno+0x90>
		HAL_GPIO_WritePin(ClignD_GPIO_Port, ClignD_Pin, RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2110      	movs	r1, #16
 8000a32:	4810      	ldr	r0, [pc, #64]	; (8000a74 <cligno+0xb0>)
 8000a34:	f001 f95c 	bl	8001cf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ClignG_GPIO_Port, ClignG_Pin, RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <cligno+0xb0>)
 8000a3e:	f001 f957 	bl	8001cf0 <HAL_GPIO_WritePin>
		if(position_clign == position_clign_before)
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <cligno+0x94>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <cligno+0x98>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d102      	bne.n	8000a54 <cligno+0x90>
			active_clign = 0;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <cligno+0xac>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000024c 	.word	0x2000024c
 8000a5c:	2000020c 	.word	0x2000020c
 8000a60:	08004cf4 	.word	0x08004cf4
 8000a64:	20000214 	.word	0x20000214
 8000a68:	08004cfc 	.word	0x08004cfc
 8000a6c:	08004d04 	.word	0x08004d04
 8000a70:	20000210 	.word	0x20000210
 8000a74:	40020400 	.word	0x40020400

08000a78 <phares>:

void phares()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	phare = (phare+1)%2;
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <phares+0x3c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	bfb8      	it	lt
 8000a8a:	425b      	neglt	r3, r3
 8000a8c:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <phares+0x3c>)
 8000a8e:	6013      	str	r3, [r2, #0]
	if(phare == 1){
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <phares+0x3c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d105      	bne.n	8000aa4 <phares+0x2c>
		HAL_GPIO_WritePin(phares_GPIO_Port, phares_Pin, SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2140      	movs	r1, #64	; 0x40
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <phares+0x40>)
 8000a9e:	f001 f927 	bl	8001cf0 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(phares_GPIO_Port, phares_Pin, RESET);
	}
}
 8000aa2:	e004      	b.n	8000aae <phares+0x36>
		HAL_GPIO_WritePin(phares_GPIO_Port, phares_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <phares+0x40>)
 8000aaa:	f001 f921 	bl	8001cf0 <HAL_GPIO_WritePin>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000208 	.word	0x20000208
 8000ab8:	40020000 	.word	0x40020000

08000abc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b61      	ldr	r3, [pc, #388]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a60      	ldr	r2, [pc, #384]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b5e      	ldr	r3, [pc, #376]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b5a      	ldr	r3, [pc, #360]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a59      	ldr	r2, [pc, #356]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b57      	ldr	r3, [pc, #348]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b53      	ldr	r3, [pc, #332]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a52      	ldr	r2, [pc, #328]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b50      	ldr	r3, [pc, #320]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b4c      	ldr	r3, [pc, #304]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a4b      	ldr	r2, [pc, #300]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b45      	ldr	r3, [pc, #276]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a44      	ldr	r2, [pc, #272]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <MX_GPIO_Init+0x1a0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|phares_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2160      	movs	r1, #96	; 0x60
 8000b62:	483f      	ldr	r0, [pc, #252]	; (8000c60 <MX_GPIO_Init+0x1a4>)
 8000b64:	f001 f8c4 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, sens2_Pin|ClignD_Pin|ClignG_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000b6e:	483d      	ldr	r0, [pc, #244]	; (8000c64 <MX_GPIO_Init+0x1a8>)
 8000b70:	f001 f8be 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sens1_GPIO_Port, sens1_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	483b      	ldr	r0, [pc, #236]	; (8000c68 <MX_GPIO_Init+0x1ac>)
 8000b7a:	f001 f8b9 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b84:	4b39      	ldr	r3, [pc, #228]	; (8000c6c <MX_GPIO_Init+0x1b0>)
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4835      	ldr	r0, [pc, #212]	; (8000c68 <MX_GPIO_Init+0x1ac>)
 8000b94:	f000 ff2a 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b98:	f641 737f 	movw	r3, #8063	; 0x1f7f
 8000b9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	482e      	ldr	r0, [pc, #184]	; (8000c68 <MX_GPIO_Init+0x1ac>)
 8000bae:	f000 ff1d 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA7 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_11
 8000bb2:	f649 0391 	movw	r3, #39057	; 0x9891
 8000bb6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4826      	ldr	r0, [pc, #152]	; (8000c60 <MX_GPIO_Init+0x1a4>)
 8000bc8:	f000 ff10 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|phares_Pin;
 8000bcc:	2360      	movs	r3, #96	; 0x60
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	481f      	ldr	r0, [pc, #124]	; (8000c60 <MX_GPIO_Init+0x1a4>)
 8000be4:	f000 ff02 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000be8:	f24f 33c7 	movw	r3, #62407	; 0xf3c7
 8000bec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4819      	ldr	r0, [pc, #100]	; (8000c64 <MX_GPIO_Init+0x1a8>)
 8000bfe:	f000 fef5 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = sens2_Pin|ClignD_Pin|ClignG_Pin;
 8000c02:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <MX_GPIO_Init+0x1a8>)
 8000c1c:	f000 fee6 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sens1_Pin;
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(sens1_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <MX_GPIO_Init+0x1ac>)
 8000c38:	f000 fed8 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c40:	2303      	movs	r3, #3
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4808      	ldr	r0, [pc, #32]	; (8000c70 <MX_GPIO_Init+0x1b4>)
 8000c50:	f000 fecc 	bl	80019ec <HAL_GPIO_Init>

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000
 8000c64:	40020400 	.word	0x40020400
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	10210000 	.word	0x10210000
 8000c70:	40020c00 	.word	0x40020c00

08000c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c78:	f000 fd12 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7c:	f000 f846 	bl	8000d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c80:	f7ff ff1c 	bl	8000abc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c84:	f000 fc34 	bl	80014f0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c88:	f000 f9f2 	bl	8001070 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c8c:	f000 fa92 	bl	80011b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c90:	f000 fb06 	bl	80012a0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000c94:	f000 fc02 	bl	800149c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialisation des timers
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // hacheur moteur
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <main+0x7c>)
 8000c9c:	f001 fd28 	bl	80026f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // servo-moteur
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <main+0x80>)
 8000ca4:	f001 fd24 	bl	80026f0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000ca8:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <main+0x84>)
 8000caa:	f001 fcc8 	bl	800263e <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart1, (uint8_t*)rxData, 7);
 8000cae:	2207      	movs	r2, #7
 8000cb0:	4912      	ldr	r1, [pc, #72]	; (8000cfc <main+0x88>)
 8000cb2:	4813      	ldr	r0, [pc, #76]	; (8000d00 <main+0x8c>)
 8000cb4:	f002 fc8c 	bl	80035d0 <HAL_UART_Receive_IT>

  // On initialise le sens du moteur (avance)
  sens_moteur(1);
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff fe51 	bl	8000960 <sens_moteur>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(newMsg){
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <main+0x90>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0fb      	beq.n	8000cbe <main+0x4a>
		  strcpy(buffer,rxData);
 8000cc6:	490d      	ldr	r1, [pc, #52]	; (8000cfc <main+0x88>)
 8000cc8:	480f      	ldr	r0, [pc, #60]	; (8000d08 <main+0x94>)
 8000cca:	f003 fb29 	bl	8004320 <strcpy>
		  car_command();
 8000cce:	f7ff fcb1 	bl	8000634 <car_command>

		  // On vide les buffers
		  memset(buffer, 0, sizeof(buffer));
 8000cd2:	2232      	movs	r2, #50	; 0x32
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	480c      	ldr	r0, [pc, #48]	; (8000d08 <main+0x94>)
 8000cd8:	f003 fafa 	bl	80042d0 <memset>
		  memset(rxData, 0, sizeof(rxData));
 8000cdc:	2207      	movs	r2, #7
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <main+0x88>)
 8000ce2:	f003 faf5 	bl	80042d0 <memset>
		  newMsg = 0;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <main+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
	  if(newMsg){
 8000cec:	e7e7      	b.n	8000cbe <main+0x4a>
 8000cee:	bf00      	nop
 8000cf0:	200002d8 	.word	0x200002d8
 8000cf4:	20000318 	.word	0x20000318
 8000cf8:	20000298 	.word	0x20000298
 8000cfc:	20000250 	.word	0x20000250
 8000d00:	20000258 	.word	0x20000258
 8000d04:	200001f8 	.word	0x200001f8
 8000d08:	20000214 	.word	0x20000214

08000d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b094      	sub	sp, #80	; 0x50
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 0320 	add.w	r3, r7, #32
 8000d16:	2230      	movs	r2, #48	; 0x30
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 fad8 	bl	80042d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <SystemClock_Config+0xc8>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <SystemClock_Config+0xc8>)
 8000d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <SystemClock_Config+0xc8>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <SystemClock_Config+0xcc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <SystemClock_Config+0xcc>)
 8000d56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <SystemClock_Config+0xcc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d70:	2310      	movs	r3, #16
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d74:	2302      	movs	r3, #2
 8000d76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d80:	2348      	movs	r3, #72	; 0x48
 8000d82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 0320 	add.w	r3, r7, #32
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 ffc7 	bl	8001d24 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d9c:	f000 f83c 	bl	8000e18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	230f      	movs	r3, #15
 8000da2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da4:	2302      	movs	r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fa21 	bl	8002204 <HAL_RCC_ClockConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dc8:	f000 f826 	bl	8000e18 <Error_Handler>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3750      	adds	r7, #80	; 0x50
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000

08000ddc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// L'objectif est d'avoir une interruption la plus rapide possible
// On met donc à jour un flag pour traiter les données dans la boucle while(1) du main
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_UART_RxCpltCallback+0x2c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d107      	bne.n	8000dfe <HAL_UART_RxCpltCallback+0x22>
		newMsg = 1;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_UART_RxCpltCallback+0x30>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,(uint8_t*)rxData,7);
 8000df4:	2207      	movs	r2, #7
 8000df6:	4906      	ldr	r1, [pc, #24]	; (8000e10 <HAL_UART_RxCpltCallback+0x34>)
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <HAL_UART_RxCpltCallback+0x38>)
 8000dfa:	f002 fbe9 	bl	80035d0 <HAL_UART_Receive_IT>
	}
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	200001f8 	.word	0x200001f8
 8000e10:	20000250 	.word	0x20000250
 8000e14:	20000258 	.word	0x20000258

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <Error_Handler+0x6>

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e5e:	2007      	movs	r0, #7
 8000e60:	f000 fd60 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 fc42 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if((position_clign == 1)&&(active_clign == 1))
 8000ec8:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <TIM3_IRQHandler+0xec>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d124      	bne.n	8000f1a <TIM3_IRQHandler+0x56>
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <TIM3_IRQHandler+0xf0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d120      	bne.n	8000f1a <TIM3_IRQHandler+0x56>
	{
		if(clign <= 1)
 8000ed8:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <TIM3_IRQHandler+0xf4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	dc0a      	bgt.n	8000ef6 <TIM3_IRQHandler+0x32>
		{
			HAL_GPIO_WritePin(ClignD_GPIO_Port, ClignD_Pin, SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	4835      	ldr	r0, [pc, #212]	; (8000fbc <TIM3_IRQHandler+0xf8>)
 8000ee6:	f000 ff03 	bl	8001cf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ClignG_GPIO_Port, ClignG_Pin, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2120      	movs	r1, #32
 8000eee:	4833      	ldr	r0, [pc, #204]	; (8000fbc <TIM3_IRQHandler+0xf8>)
 8000ef0:	f000 fefe 	bl	8001cf0 <HAL_GPIO_WritePin>
		if(clign <= 1)
 8000ef4:	e04f      	b.n	8000f96 <TIM3_IRQHandler+0xd2>
		}
		else if(clign > 1)
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <TIM3_IRQHandler+0xf4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	dd4b      	ble.n	8000f96 <TIM3_IRQHandler+0xd2>
		{
			HAL_GPIO_WritePin(ClignD_GPIO_Port, ClignD_Pin, RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2110      	movs	r1, #16
 8000f02:	482e      	ldr	r0, [pc, #184]	; (8000fbc <TIM3_IRQHandler+0xf8>)
 8000f04:	f000 fef4 	bl	8001cf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ClignG_GPIO_Port, ClignG_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	482b      	ldr	r0, [pc, #172]	; (8000fbc <TIM3_IRQHandler+0xf8>)
 8000f0e:	f000 feef 	bl	8001cf0 <HAL_GPIO_WritePin>
			clign = 0;
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <TIM3_IRQHandler+0xf4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
		if(clign <= 1)
 8000f18:	e03d      	b.n	8000f96 <TIM3_IRQHandler+0xd2>
		}
	}
	else if((position_clign == 2)&&(active_clign == 1))
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <TIM3_IRQHandler+0xec>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d11a      	bne.n	8000f58 <TIM3_IRQHandler+0x94>
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <TIM3_IRQHandler+0xf0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d116      	bne.n	8000f58 <TIM3_IRQHandler+0x94>
	{
		if(clign <= 1)
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <TIM3_IRQHandler+0xf4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	dc05      	bgt.n	8000f3e <TIM3_IRQHandler+0x7a>
		{
			HAL_GPIO_WritePin(ClignD_GPIO_Port, ClignD_Pin, SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2110      	movs	r1, #16
 8000f36:	4821      	ldr	r0, [pc, #132]	; (8000fbc <TIM3_IRQHandler+0xf8>)
 8000f38:	f000 feda 	bl	8001cf0 <HAL_GPIO_WritePin>
		if(clign <= 1)
 8000f3c:	e02d      	b.n	8000f9a <TIM3_IRQHandler+0xd6>
		}
		else if(clign > 1)
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <TIM3_IRQHandler+0xf4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	dd29      	ble.n	8000f9a <TIM3_IRQHandler+0xd6>
		{
			HAL_GPIO_WritePin(ClignD_GPIO_Port, ClignD_Pin, RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2110      	movs	r1, #16
 8000f4a:	481c      	ldr	r0, [pc, #112]	; (8000fbc <TIM3_IRQHandler+0xf8>)
 8000f4c:	f000 fed0 	bl	8001cf0 <HAL_GPIO_WritePin>
			clign = 0;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <TIM3_IRQHandler+0xf4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
		if(clign <= 1)
 8000f56:	e020      	b.n	8000f9a <TIM3_IRQHandler+0xd6>
		}
	}
	else if((position_clign == 3)&&(active_clign == 1))
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <TIM3_IRQHandler+0xec>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d11d      	bne.n	8000f9c <TIM3_IRQHandler+0xd8>
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <TIM3_IRQHandler+0xf0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d119      	bne.n	8000f9c <TIM3_IRQHandler+0xd8>
	{
		if(clign <= 1)
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <TIM3_IRQHandler+0xf4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	dc05      	bgt.n	8000f7c <TIM3_IRQHandler+0xb8>
		{
			HAL_GPIO_WritePin(ClignG_GPIO_Port, ClignG_Pin, SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2120      	movs	r1, #32
 8000f74:	4811      	ldr	r0, [pc, #68]	; (8000fbc <TIM3_IRQHandler+0xf8>)
 8000f76:	f000 febb 	bl	8001cf0 <HAL_GPIO_WritePin>
 8000f7a:	e00f      	b.n	8000f9c <TIM3_IRQHandler+0xd8>
		}
		else if(clign > 1)
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <TIM3_IRQHandler+0xf4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	dd0b      	ble.n	8000f9c <TIM3_IRQHandler+0xd8>
		{
			HAL_GPIO_WritePin(ClignG_GPIO_Port, ClignG_Pin, RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2120      	movs	r1, #32
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <TIM3_IRQHandler+0xf8>)
 8000f8a:	f000 feb1 	bl	8001cf0 <HAL_GPIO_WritePin>
			clign = 0;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <TIM3_IRQHandler+0xf4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	e002      	b.n	8000f9c <TIM3_IRQHandler+0xd8>
		if(clign <= 1)
 8000f96:	bf00      	nop
 8000f98:	e000      	b.n	8000f9c <TIM3_IRQHandler+0xd8>
		if(clign <= 1)
 8000f9a:	bf00      	nop
		}
	}
	clign++;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <TIM3_IRQHandler+0xf4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <TIM3_IRQHandler+0xf4>)
 8000fa4:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <TIM3_IRQHandler+0xfc>)
 8000fa8:	f001 fbd4 	bl	8002754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000024c 	.word	0x2000024c
 8000fb4:	20000210 	.word	0x20000210
 8000fb8:	20000248 	.word	0x20000248
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	20000298 	.word	0x20000298

08000fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <USART1_IRQHandler+0x10>)
 8000fca:	f002 fb57 	bl	800367c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000258 	.word	0x20000258

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f003 f938 	bl	800427c <__errno>
 800100c:	4602      	mov	r2, r0
 800100e:	230c      	movs	r3, #12
 8001010:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20020000 	.word	0x20020000
 8001038:	00000400 	.word	0x00000400
 800103c:	200001fc 	.word	0x200001fc
 8001040:	200003a0 	.word	0x200003a0

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <SystemInit+0x28>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <SystemInit+0x28>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <SystemInit+0x28>)
 800105a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800105e:	609a      	str	r2, [r3, #8]
#endif
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b096      	sub	sp, #88	; 0x58
 8001074:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2220      	movs	r2, #32
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 f911 	bl	80042d0 <memset>

  htim1.Instance = TIM1;
 80010ae:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <MX_TIM1_Init+0x13c>)
 80010b0:	4a3f      	ldr	r2, [pc, #252]	; (80011b0 <MX_TIM1_Init+0x140>)
 80010b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <MX_TIM1_Init+0x13c>)
 80010b6:	f240 123f 	movw	r2, #319	; 0x13f
 80010ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <MX_TIM1_Init+0x13c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80010c2:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <MX_TIM1_Init+0x13c>)
 80010c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <MX_TIM1_Init+0x13c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010d0:	4b36      	ldr	r3, [pc, #216]	; (80011ac <MX_TIM1_Init+0x13c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d6:	4b35      	ldr	r3, [pc, #212]	; (80011ac <MX_TIM1_Init+0x13c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010dc:	4833      	ldr	r0, [pc, #204]	; (80011ac <MX_TIM1_Init+0x13c>)
 80010de:	f001 fa83 	bl	80025e8 <HAL_TIM_Base_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010e8:	f7ff fe96 	bl	8000e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f6:	4619      	mov	r1, r3
 80010f8:	482c      	ldr	r0, [pc, #176]	; (80011ac <MX_TIM1_Init+0x13c>)
 80010fa:	f001 fcf9 	bl	8002af0 <HAL_TIM_ConfigClockSource>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001104:	f7ff fe88 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001108:	4828      	ldr	r0, [pc, #160]	; (80011ac <MX_TIM1_Init+0x13c>)
 800110a:	f001 fabc 	bl	8002686 <HAL_TIM_PWM_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001114:	f7ff fe80 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001118:	2300      	movs	r3, #0
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001120:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001124:	4619      	mov	r1, r3
 8001126:	4821      	ldr	r0, [pc, #132]	; (80011ac <MX_TIM1_Init+0x13c>)
 8001128:	f002 f898 	bl	800325c <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001132:	f7ff fe71 	bl	8000e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001136:	2360      	movs	r3, #96	; 0x60
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	4814      	ldr	r0, [pc, #80]	; (80011ac <MX_TIM1_Init+0x13c>)
 800115c:	f001 fc02 	bl	8002964 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001166:	f7ff fe57 	bl	8000e18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800117e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001182:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <MX_TIM1_Init+0x13c>)
 800118e:	f002 f8d3 	bl	8003338 <HAL_TIMEx_ConfigBreakDeadTime>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001198:	f7ff fe3e 	bl	8000e18 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <MX_TIM1_Init+0x13c>)
 800119e:	f000 f91f 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 80011a2:	bf00      	nop
 80011a4:	3758      	adds	r7, #88	; 0x58
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200002d8 	.word	0x200002d8
 80011b0:	40010000 	.word	0x40010000

080011b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08e      	sub	sp, #56	; 0x38
 80011b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	615a      	str	r2, [r3, #20]
 80011e2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <MX_TIM2_Init+0xe8>)
 80011e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <MX_TIM2_Init+0xe8>)
 80011ee:	f240 529f 	movw	r2, #1439	; 0x59f
 80011f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b29      	ldr	r3, [pc, #164]	; (800129c <MX_TIM2_Init+0xe8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80011fa:	4b28      	ldr	r3, [pc, #160]	; (800129c <MX_TIM2_Init+0xe8>)
 80011fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001200:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <MX_TIM2_Init+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <MX_TIM2_Init+0xe8>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800120e:	4823      	ldr	r0, [pc, #140]	; (800129c <MX_TIM2_Init+0xe8>)
 8001210:	f001 f9ea 	bl	80025e8 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800121a:	f7ff fdfd 	bl	8000e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001228:	4619      	mov	r1, r3
 800122a:	481c      	ldr	r0, [pc, #112]	; (800129c <MX_TIM2_Init+0xe8>)
 800122c:	f001 fc60 	bl	8002af0 <HAL_TIM_ConfigClockSource>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001236:	f7ff fdef 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800123a:	4818      	ldr	r0, [pc, #96]	; (800129c <MX_TIM2_Init+0xe8>)
 800123c:	f001 fa23 	bl	8002686 <HAL_TIM_PWM_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001246:	f7ff fde7 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	4619      	mov	r1, r3
 8001258:	4810      	ldr	r0, [pc, #64]	; (800129c <MX_TIM2_Init+0xe8>)
 800125a:	f001 ffff 	bl	800325c <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001264:	f7ff fdd8 	bl	8000e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001268:	2360      	movs	r3, #96	; 0x60
 800126a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2204      	movs	r2, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM2_Init+0xe8>)
 8001280:	f001 fb70 	bl	8002964 <HAL_TIM_PWM_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800128a:	f7ff fdc5 	bl	8000e18 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM2_Init+0xe8>)
 8001290:	f000 f8a6 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8001294:	bf00      	nop
 8001296:	3738      	adds	r7, #56	; 0x38
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000318 	.word	0x20000318

080012a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM3_Init+0x94>)
 80012be:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <MX_TIM3_Init+0x98>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600-1;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_TIM3_Init+0x94>)
 80012c4:	f640 620f 	movw	r2, #3599	; 0xe0f
 80012c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_TIM3_Init+0x94>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_TIM3_Init+0x94>)
 80012d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80012d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_TIM3_Init+0x94>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_TIM3_Init+0x94>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012e4:	4813      	ldr	r0, [pc, #76]	; (8001334 <MX_TIM3_Init+0x94>)
 80012e6:	f001 f97f 	bl	80025e8 <HAL_TIM_Base_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012f0:	f7ff fd92 	bl	8000e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <MX_TIM3_Init+0x94>)
 8001302:	f001 fbf5 	bl	8002af0 <HAL_TIM_ConfigClockSource>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800130c:	f7ff fd84 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_TIM3_Init+0x94>)
 800131e:	f001 ff9d 	bl	800325c <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001328:	f7ff fd76 	bl	8000e18 <Error_Handler>
  }

}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000298 	.word	0x20000298
 8001338:	40000400 	.word	0x40000400

0800133c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <HAL_TIM_Base_MspInit+0x98>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10e      	bne.n	800136c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <HAL_TIM_Base_MspInit+0x9c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <HAL_TIM_Base_MspInit+0x9c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_TIM_Base_MspInit+0x9c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800136a:	e02e      	b.n	80013ca <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001374:	d10e      	bne.n	8001394 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_TIM_Base_MspInit+0x9c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_TIM_Base_MspInit+0x9c>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_TIM_Base_MspInit+0x9c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
}
 8001392:	e01a      	b.n	80013ca <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_TIM_Base_MspInit+0xa0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d115      	bne.n	80013ca <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_TIM_Base_MspInit+0x9c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <HAL_TIM_Base_MspInit+0x9c>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_TIM_Base_MspInit+0x9c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	201d      	movs	r0, #29
 80013c0:	f000 fabb 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013c4:	201d      	movs	r0, #29
 80013c6:	f000 fad4 	bl	8001972 <HAL_NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40010000 	.word	0x40010000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40000400 	.word	0x40000400

080013e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a24      	ldr	r2, [pc, #144]	; (8001490 <HAL_TIM_MspPostInit+0xb0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d11f      	bne.n	8001442 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <HAL_TIM_MspPostInit+0xb4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a22      	ldr	r2, [pc, #136]	; (8001494 <HAL_TIM_MspPostInit+0xb4>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_TIM_MspPostInit+0xb4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800141e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001430:	2301      	movs	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4817      	ldr	r0, [pc, #92]	; (8001498 <HAL_TIM_MspPostInit+0xb8>)
 800143c:	f000 fad6 	bl	80019ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001440:	e022      	b.n	8001488 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800144a:	d11d      	bne.n	8001488 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_TIM_MspPostInit+0xb4>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <HAL_TIM_MspPostInit+0xb4>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_TIM_MspPostInit+0xb4>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001468:	2302      	movs	r3, #2
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001478:	2301      	movs	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_TIM_MspPostInit+0xb8>)
 8001484:	f000 fab2 	bl	80019ec <HAL_GPIO_Init>
}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40010000 	.word	0x40010000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000

0800149c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_USART1_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80014ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014d4:	f001 ff96 	bl	8003404 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f7ff fc9b 	bl	8000e18 <Error_Handler>
  }

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000258 	.word	0x20000258
 80014ec:	40011000 	.word	0x40011000

080014f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_USART2_UART_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_USART2_UART_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_USART2_UART_Init+0x4c>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_USART2_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_USART2_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_USART2_UART_Init+0x4c>)
 8001528:	f001 ff6c 	bl	8003404 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001532:	f7ff fc71 	bl	8000e18 <Error_Handler>
  }

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000358 	.word	0x20000358
 8001540:	40004400 	.word	0x40004400

08001544 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	; 0x30
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a36      	ldr	r2, [pc, #216]	; (800163c <HAL_UART_MspInit+0xf8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d135      	bne.n	80015d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	4b35      	ldr	r3, [pc, #212]	; (8001640 <HAL_UART_MspInit+0xfc>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a34      	ldr	r2, [pc, #208]	; (8001640 <HAL_UART_MspInit+0xfc>)
 8001570:	f043 0310 	orr.w	r3, r3, #16
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b32      	ldr	r3, [pc, #200]	; (8001640 <HAL_UART_MspInit+0xfc>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <HAL_UART_MspInit+0xfc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <HAL_UART_MspInit+0xfc>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_UART_MspInit+0xfc>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800159e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b0:	2307      	movs	r3, #7
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4619      	mov	r1, r3
 80015ba:	4822      	ldr	r0, [pc, #136]	; (8001644 <HAL_UART_MspInit+0x100>)
 80015bc:	f000 fa16 	bl	80019ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2025      	movs	r0, #37	; 0x25
 80015c6:	f000 f9b8 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015ca:	2025      	movs	r0, #37	; 0x25
 80015cc:	f000 f9d1 	bl	8001972 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015d0:	e030      	b.n	8001634 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <HAL_UART_MspInit+0x104>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d12b      	bne.n	8001634 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_UART_MspInit+0xfc>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a16      	ldr	r2, [pc, #88]	; (8001640 <HAL_UART_MspInit+0xfc>)
 80015e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_UART_MspInit+0xfc>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_UART_MspInit+0xfc>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_UART_MspInit+0xfc>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6313      	str	r3, [r2, #48]	; 0x30
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_UART_MspInit+0xfc>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001614:	230c      	movs	r3, #12
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001624:	2307      	movs	r3, #7
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_UART_MspInit+0x100>)
 8001630:	f000 f9dc 	bl	80019ec <HAL_GPIO_Init>
}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	; 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40011000 	.word	0x40011000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	40004400 	.word	0x40004400

0800164c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001684 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001650:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001652:	e003      	b.n	800165c <LoopCopyDataInit>

08001654 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001656:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001658:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800165a:	3104      	adds	r1, #4

0800165c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800165c:	480b      	ldr	r0, [pc, #44]	; (800168c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001660:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001662:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001664:	d3f6      	bcc.n	8001654 <CopyDataInit>
  ldr  r2, =_sbss
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001668:	e002      	b.n	8001670 <LoopFillZerobss>

0800166a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800166a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800166c:	f842 3b04 	str.w	r3, [r2], #4

08001670 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001672:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001674:	d3f9      	bcc.n	800166a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001676:	f7ff fce5 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167a:	f002 fe05 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167e:	f7ff faf9 	bl	8000c74 <main>
  bx  lr    
 8001682:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001684:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001688:	08004e74 	.word	0x08004e74
  ldr  r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001690:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001694:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001698:	200003a0 	.word	0x200003a0

0800169c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_Init+0x40>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <HAL_Init+0x40>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_Init+0x40>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 f92b 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f808 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff fba4 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f943 	bl	800198e <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f000 f90b 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000000 	.word	0x20000000
 800173c:	20000008 	.word	0x20000008
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	20000398 	.word	0x20000398

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000398 	.word	0x20000398

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff8e 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff29 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff3e 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff8e 	bl	8001878 <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5d 	bl	8001824 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff31 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d004      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e00c      	b.n	80019de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2205      	movs	r2, #5
 80019c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0201 	bic.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	e159      	b.n	8001cbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8148 	bne.w	8001cb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d00b      	beq.n	8001a46 <HAL_GPIO_Init+0x5a>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d007      	beq.n	8001a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3a:	2b11      	cmp	r3, #17
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d130      	bne.n	8001aa8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 0201 	and.w	r2, r3, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0xfc>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b12      	cmp	r3, #18
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80a2 	beq.w	8001cb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b56      	ldr	r3, [pc, #344]	; (8001cd0 <HAL_GPIO_Init+0x2e4>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a55      	ldr	r2, [pc, #340]	; (8001cd0 <HAL_GPIO_Init+0x2e4>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_GPIO_Init+0x2e4>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8e:	4a51      	ldr	r2, [pc, #324]	; (8001cd4 <HAL_GPIO_Init+0x2e8>)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a48      	ldr	r2, [pc, #288]	; (8001cd8 <HAL_GPIO_Init+0x2ec>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d019      	beq.n	8001bee <HAL_GPIO_Init+0x202>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a47      	ldr	r2, [pc, #284]	; (8001cdc <HAL_GPIO_Init+0x2f0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0x1fe>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a46      	ldr	r2, [pc, #280]	; (8001ce0 <HAL_GPIO_Init+0x2f4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_GPIO_Init+0x1fa>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a45      	ldr	r2, [pc, #276]	; (8001ce4 <HAL_GPIO_Init+0x2f8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_GPIO_Init+0x1f6>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a44      	ldr	r2, [pc, #272]	; (8001ce8 <HAL_GPIO_Init+0x2fc>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_GPIO_Init+0x1f2>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e008      	b.n	8001bf0 <HAL_GPIO_Init+0x204>
 8001bde:	2307      	movs	r3, #7
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x204>
 8001be2:	2303      	movs	r3, #3
 8001be4:	e004      	b.n	8001bf0 <HAL_GPIO_Init+0x204>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e002      	b.n	8001bf0 <HAL_GPIO_Init+0x204>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_GPIO_Init+0x204>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	f002 0203 	and.w	r2, r2, #3
 8001bf6:	0092      	lsls	r2, r2, #2
 8001bf8:	4093      	lsls	r3, r2
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c00:	4934      	ldr	r1, [pc, #208]	; (8001cd4 <HAL_GPIO_Init+0x2e8>)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3302      	adds	r3, #2
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c0e:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c32:	4a2e      	ldr	r2, [pc, #184]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c38:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5c:	4a23      	ldr	r2, [pc, #140]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb0:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b0f      	cmp	r3, #15
 8001cc0:	f67f aea2 	bls.w	8001a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3724      	adds	r7, #36	; 0x24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d0c:	e003      	b.n	8001d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e25b      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d075      	beq.n	8001e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d42:	4ba3      	ldr	r3, [pc, #652]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d00c      	beq.n	8001d68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4e:	4ba0      	ldr	r3, [pc, #640]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d112      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5a:	4b9d      	ldr	r3, [pc, #628]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d66:	d10b      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	4b99      	ldr	r3, [pc, #612]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d05b      	beq.n	8001e2c <HAL_RCC_OscConfig+0x108>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d157      	bne.n	8001e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e236      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_OscConfig+0x74>
 8001d8a:	4b91      	ldr	r3, [pc, #580]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a90      	ldr	r2, [pc, #576]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e01d      	b.n	8001dd4 <HAL_RCC_OscConfig+0xb0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x98>
 8001da2:	4b8b      	ldr	r3, [pc, #556]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a8a      	ldr	r2, [pc, #552]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b88      	ldr	r3, [pc, #544]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a87      	ldr	r2, [pc, #540]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0xb0>
 8001dbc:	4b84      	ldr	r3, [pc, #528]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a83      	ldr	r2, [pc, #524]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b81      	ldr	r3, [pc, #516]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a80      	ldr	r2, [pc, #512]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fcc6 	bl	800176c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff fcc2 	bl	800176c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1fb      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0xc0>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fcb2 	bl	800176c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fcae 	bl	800176c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1e7      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	4b6c      	ldr	r3, [pc, #432]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0xe8>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d063      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3a:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d11c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e52:	4b5f      	ldr	r3, [pc, #380]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d116      	bne.n	8001e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	4b5c      	ldr	r3, [pc, #368]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_RCC_OscConfig+0x152>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e1bb      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4952      	ldr	r1, [pc, #328]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	e03a      	b.n	8001f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e94:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <HAL_RCC_OscConfig+0x2b0>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fc67 	bl	800176c <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fc63 	bl	800176c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e19c      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4940      	ldr	r1, [pc, #256]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed6:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <HAL_RCC_OscConfig+0x2b0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff fc46 	bl	800176c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fc42 	bl	800176c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e17b      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d030      	beq.n	8001f70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_RCC_OscConfig+0x2b4>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fc26 	bl	800176c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f24:	f7ff fc22 	bl	800176c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e15b      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x200>
 8001f42:	e015      	b.n	8001f70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_OscConfig+0x2b4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fc0f 	bl	800176c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f52:	f7ff fc0b 	bl	800176c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e144      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f0      	bne.n	8001f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80a0 	beq.w	80020be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10f      	bne.n	8001fae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001faa:	2301      	movs	r3, #1
 8001fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_OscConfig+0x2b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d121      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_RCC_OscConfig+0x2b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_RCC_OscConfig+0x2b8>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fbd1 	bl	800176c <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	e011      	b.n	8001ff2 <HAL_RCC_OscConfig+0x2ce>
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	42470000 	.word	0x42470000
 8001fd8:	42470e80 	.word	0x42470e80
 8001fdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe0:	f7ff fbc4 	bl	800176c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e0fd      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff2:	4b81      	ldr	r3, [pc, #516]	; (80021f8 <HAL_RCC_OscConfig+0x4d4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d106      	bne.n	8002014 <HAL_RCC_OscConfig+0x2f0>
 8002006:	4b7d      	ldr	r3, [pc, #500]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	4a7c      	ldr	r2, [pc, #496]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	e01c      	b.n	800204e <HAL_RCC_OscConfig+0x32a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d10c      	bne.n	8002036 <HAL_RCC_OscConfig+0x312>
 800201c:	4b77      	ldr	r3, [pc, #476]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	4a76      	ldr	r2, [pc, #472]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6713      	str	r3, [r2, #112]	; 0x70
 8002028:	4b74      	ldr	r3, [pc, #464]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	4a73      	ldr	r2, [pc, #460]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6713      	str	r3, [r2, #112]	; 0x70
 8002034:	e00b      	b.n	800204e <HAL_RCC_OscConfig+0x32a>
 8002036:	4b71      	ldr	r3, [pc, #452]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	4a70      	ldr	r2, [pc, #448]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6713      	str	r3, [r2, #112]	; 0x70
 8002042:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002046:	4a6d      	ldr	r2, [pc, #436]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d015      	beq.n	8002082 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7ff fb89 	bl	800176c <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7ff fb85 	bl	800176c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0bc      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	4b61      	ldr	r3, [pc, #388]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ee      	beq.n	800205e <HAL_RCC_OscConfig+0x33a>
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7ff fb73 	bl	800176c <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7ff fb6f 	bl	800176c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0a6      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	4b56      	ldr	r3, [pc, #344]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ee      	bne.n	800208a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b52      	ldr	r3, [pc, #328]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a51      	ldr	r2, [pc, #324]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8092 	beq.w	80021ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020c8:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d05c      	beq.n	800218e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d141      	bne.n	8002160 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4b48      	ldr	r3, [pc, #288]	; (8002200 <HAL_RCC_OscConfig+0x4dc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff fb43 	bl	800176c <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7ff fb3f 	bl	800176c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e078      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	019b      	lsls	r3, r3, #6
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	3b01      	subs	r3, #1
 8002122:	041b      	lsls	r3, r3, #16
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	4933      	ldr	r1, [pc, #204]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002132:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_RCC_OscConfig+0x4dc>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff fb18 	bl	800176c <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7ff fb14 	bl	800176c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e04d      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x41c>
 800215e:	e045      	b.n	80021ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x4dc>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fb01 	bl	800176c <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fafd 	bl	800176c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e036      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f0      	bne.n	800216e <HAL_RCC_OscConfig+0x44a>
 800218c:	e02e      	b.n	80021ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e029      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_RCC_OscConfig+0x4d8>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d115      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021c2:	4013      	ands	r3, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d10d      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d106      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000
 80021fc:	40023800 	.word	0x40023800
 8002200:	42470060 	.word	0x42470060

08002204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0cc      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d90c      	bls.n	8002240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b65      	ldr	r3, [pc, #404]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b63      	ldr	r3, [pc, #396]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0b8      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002258:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a52      	ldr	r2, [pc, #328]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800227a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	494d      	ldr	r1, [pc, #308]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d044      	beq.n	8002324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d119      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e06f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e067      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e2:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f023 0203 	bic.w	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4934      	ldr	r1, [pc, #208]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f4:	f7ff fa3a 	bl	800176c <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7ff fa36 	bl	800176c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e04f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 020c 	and.w	r2, r3, #12
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	429a      	cmp	r2, r3
 8002322:	d1eb      	bne.n	80022fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d20c      	bcs.n	800234c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b22      	ldr	r3, [pc, #136]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e032      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4916      	ldr	r1, [pc, #88]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	490e      	ldr	r1, [pc, #56]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800238a:	f000 f821 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800238e:	4601      	mov	r1, r0
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	fa21 f303 	lsr.w	r3, r1, r3
 80023a2:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f99a 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023c00 	.word	0x40023c00
 80023c0:	40023800 	.word	0x40023800
 80023c4:	08004d0c 	.word	0x08004d0c
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e6:	4b63      	ldr	r3, [pc, #396]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d007      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x32>
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d008      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x38>
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 80b4 	bne.w	8002564 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023fc:	4b5e      	ldr	r3, [pc, #376]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023fe:	60bb      	str	r3, [r7, #8]
       break;
 8002400:	e0b3      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002402:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002404:	60bb      	str	r3, [r7, #8]
      break;
 8002406:	e0b0      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002408:	4b5a      	ldr	r3, [pc, #360]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002410:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002412:	4b58      	ldr	r3, [pc, #352]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d04a      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241e:	4b55      	ldr	r3, [pc, #340]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	099b      	lsrs	r3, r3, #6
 8002424:	f04f 0400 	mov.w	r4, #0
 8002428:	f240 11ff 	movw	r1, #511	; 0x1ff
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	ea03 0501 	and.w	r5, r3, r1
 8002434:	ea04 0602 	and.w	r6, r4, r2
 8002438:	4629      	mov	r1, r5
 800243a:	4632      	mov	r2, r6
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	f04f 0400 	mov.w	r4, #0
 8002444:	0154      	lsls	r4, r2, #5
 8002446:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800244a:	014b      	lsls	r3, r1, #5
 800244c:	4619      	mov	r1, r3
 800244e:	4622      	mov	r2, r4
 8002450:	1b49      	subs	r1, r1, r5
 8002452:	eb62 0206 	sbc.w	r2, r2, r6
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f04f 0400 	mov.w	r4, #0
 800245e:	0194      	lsls	r4, r2, #6
 8002460:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002464:	018b      	lsls	r3, r1, #6
 8002466:	1a5b      	subs	r3, r3, r1
 8002468:	eb64 0402 	sbc.w	r4, r4, r2
 800246c:	f04f 0100 	mov.w	r1, #0
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	00e2      	lsls	r2, r4, #3
 8002476:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800247a:	00d9      	lsls	r1, r3, #3
 800247c:	460b      	mov	r3, r1
 800247e:	4614      	mov	r4, r2
 8002480:	195b      	adds	r3, r3, r5
 8002482:	eb44 0406 	adc.w	r4, r4, r6
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	0262      	lsls	r2, r4, #9
 8002490:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002494:	0259      	lsls	r1, r3, #9
 8002496:	460b      	mov	r3, r1
 8002498:	4614      	mov	r4, r2
 800249a:	4618      	mov	r0, r3
 800249c:	4621      	mov	r1, r4
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f04f 0400 	mov.w	r4, #0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	f7fd fef2 	bl	8000290 <__aeabi_uldivmod>
 80024ac:	4603      	mov	r3, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e049      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b4:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	f04f 0400 	mov.w	r4, #0
 80024be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	ea03 0501 	and.w	r5, r3, r1
 80024ca:	ea04 0602 	and.w	r6, r4, r2
 80024ce:	4629      	mov	r1, r5
 80024d0:	4632      	mov	r2, r6
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	f04f 0400 	mov.w	r4, #0
 80024da:	0154      	lsls	r4, r2, #5
 80024dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024e0:	014b      	lsls	r3, r1, #5
 80024e2:	4619      	mov	r1, r3
 80024e4:	4622      	mov	r2, r4
 80024e6:	1b49      	subs	r1, r1, r5
 80024e8:	eb62 0206 	sbc.w	r2, r2, r6
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	f04f 0400 	mov.w	r4, #0
 80024f4:	0194      	lsls	r4, r2, #6
 80024f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024fa:	018b      	lsls	r3, r1, #6
 80024fc:	1a5b      	subs	r3, r3, r1
 80024fe:	eb64 0402 	sbc.w	r4, r4, r2
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	00e2      	lsls	r2, r4, #3
 800250c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002510:	00d9      	lsls	r1, r3, #3
 8002512:	460b      	mov	r3, r1
 8002514:	4614      	mov	r4, r2
 8002516:	195b      	adds	r3, r3, r5
 8002518:	eb44 0406 	adc.w	r4, r4, r6
 800251c:	f04f 0100 	mov.w	r1, #0
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	02a2      	lsls	r2, r4, #10
 8002526:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800252a:	0299      	lsls	r1, r3, #10
 800252c:	460b      	mov	r3, r1
 800252e:	4614      	mov	r4, r2
 8002530:	4618      	mov	r0, r3
 8002532:	4621      	mov	r1, r4
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f04f 0400 	mov.w	r4, #0
 800253a:	461a      	mov	r2, r3
 800253c:	4623      	mov	r3, r4
 800253e:	f7fd fea7 	bl	8000290 <__aeabi_uldivmod>
 8002542:	4603      	mov	r3, r0
 8002544:	460c      	mov	r4, r1
 8002546:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	3301      	adds	r3, #1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	60bb      	str	r3, [r7, #8]
      break;
 8002562:	e002      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002566:	60bb      	str	r3, [r7, #8]
      break;
 8002568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256a:	68bb      	ldr	r3, [r7, #8]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	00f42400 	.word	0x00f42400
 800257c:	007a1200 	.word	0x007a1200

08002580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_RCC_GetHCLKFreq+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000000 	.word	0x20000000

08002598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800259c:	f7ff fff0 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025a0:	4601      	mov	r1, r0
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	0a9b      	lsrs	r3, r3, #10
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	4a03      	ldr	r2, [pc, #12]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40023800 	.word	0x40023800
 80025bc:	08004d1c 	.word	0x08004d1c

080025c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025c4:	f7ff ffdc 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025c8:	4601      	mov	r1, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0b5b      	lsrs	r3, r3, #13
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4a03      	ldr	r2, [pc, #12]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800
 80025e4:	08004d1c 	.word	0x08004d1c

080025e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e01d      	b.n	8002636 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe fe94 	bl	800133c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4610      	mov	r0, r2
 8002628:	f000 fb4c 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b06      	cmp	r3, #6
 8002666:	d007      	beq.n	8002678 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01d      	b.n	80026d4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d106      	bne.n	80026b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f815 	bl	80026dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f000 fafd 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2201      	movs	r2, #1
 8002700:	6839      	ldr	r1, [r7, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fd84 	bl	8003210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a10      	ldr	r2, [pc, #64]	; (8002750 <HAL_TIM_PWM_Start+0x60>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d107      	bne.n	8002722 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b06      	cmp	r3, #6
 8002732:	d007      	beq.n	8002744 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40010000 	.word	0x40010000

08002754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d122      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b02      	cmp	r3, #2
 8002776:	d11b      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0202 	mvn.w	r2, #2
 8002780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fa75 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 800279c:	e005      	b.n	80027aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa67 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fa78 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d122      	bne.n	8002804 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d11b      	bne.n	8002804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0204 	mvn.w	r2, #4
 80027d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2202      	movs	r2, #2
 80027da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fa4b 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 80027f0:	e005      	b.n	80027fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa3d 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fa4e 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b08      	cmp	r3, #8
 8002810:	d122      	bne.n	8002858 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b08      	cmp	r3, #8
 800281e:	d11b      	bne.n	8002858 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0208 	mvn.w	r2, #8
 8002828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2204      	movs	r2, #4
 800282e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fa21 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002844:	e005      	b.n	8002852 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fa13 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fa24 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b10      	cmp	r3, #16
 8002864:	d122      	bne.n	80028ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b10      	cmp	r3, #16
 8002872:	d11b      	bne.n	80028ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0210 	mvn.w	r2, #16
 800287c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2208      	movs	r2, #8
 8002882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f9f7 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9e9 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f9fa 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d10e      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d107      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0201 	mvn.w	r2, #1
 80028d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f9c3 	bl	8002c5e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b80      	cmp	r3, #128	; 0x80
 80028e4:	d10e      	bne.n	8002904 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f0:	2b80      	cmp	r3, #128	; 0x80
 80028f2:	d107      	bne.n	8002904 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fd76 	bl	80033f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d10e      	bne.n	8002930 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d107      	bne.n	8002930 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f9bf 	bl	8002cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b20      	cmp	r3, #32
 800293c:	d10e      	bne.n	800295c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b20      	cmp	r3, #32
 800294a:	d107      	bne.n	800295c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0220 	mvn.w	r2, #32
 8002954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fd40 	bl	80033dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800297a:	2302      	movs	r3, #2
 800297c:	e0b4      	b.n	8002ae8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2202      	movs	r2, #2
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	f200 809f 	bhi.w	8002ad4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002996:	a201      	add	r2, pc, #4	; (adr r2, 800299c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	08002ad5 	.word	0x08002ad5
 80029a4:	08002ad5 	.word	0x08002ad5
 80029a8:	08002ad5 	.word	0x08002ad5
 80029ac:	08002a11 	.word	0x08002a11
 80029b0:	08002ad5 	.word	0x08002ad5
 80029b4:	08002ad5 	.word	0x08002ad5
 80029b8:	08002ad5 	.word	0x08002ad5
 80029bc:	08002a53 	.word	0x08002a53
 80029c0:	08002ad5 	.word	0x08002ad5
 80029c4:	08002ad5 	.word	0x08002ad5
 80029c8:	08002ad5 	.word	0x08002ad5
 80029cc:	08002a93 	.word	0x08002a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f9f4 	bl	8002dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0208 	orr.w	r2, r2, #8
 80029ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0204 	bic.w	r2, r2, #4
 80029fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6999      	ldr	r1, [r3, #24]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	619a      	str	r2, [r3, #24]
      break;
 8002a0e:	e062      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fa3a 	bl	8002e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6999      	ldr	r1, [r3, #24]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	021a      	lsls	r2, r3, #8
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	619a      	str	r2, [r3, #24]
      break;
 8002a50:	e041      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fa85 	bl	8002f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0208 	orr.w	r2, r2, #8
 8002a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0204 	bic.w	r2, r2, #4
 8002a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69d9      	ldr	r1, [r3, #28]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	61da      	str	r2, [r3, #28]
      break;
 8002a90:	e021      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 facf 	bl	800303c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69d9      	ldr	r1, [r3, #28]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	021a      	lsls	r2, r3, #8
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	61da      	str	r2, [r3, #28]
      break;
 8002ad2:	e000      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ad4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_TIM_ConfigClockSource+0x18>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e0a6      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x166>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d067      	beq.n	8002c10 <HAL_TIM_ConfigClockSource+0x120>
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	d80b      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x6c>
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d073      	beq.n	8002c30 <HAL_TIM_ConfigClockSource+0x140>
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d802      	bhi.n	8002b52 <HAL_TIM_ConfigClockSource+0x62>
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d06f      	beq.n	8002c30 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b50:	e078      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d06c      	beq.n	8002c30 <HAL_TIM_ConfigClockSource+0x140>
 8002b56:	2b30      	cmp	r3, #48	; 0x30
 8002b58:	d06a      	beq.n	8002c30 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b5a:	e073      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b5c:	2b70      	cmp	r3, #112	; 0x70
 8002b5e:	d00d      	beq.n	8002b7c <HAL_TIM_ConfigClockSource+0x8c>
 8002b60:	2b70      	cmp	r3, #112	; 0x70
 8002b62:	d804      	bhi.n	8002b6e <HAL_TIM_ConfigClockSource+0x7e>
 8002b64:	2b50      	cmp	r3, #80	; 0x50
 8002b66:	d033      	beq.n	8002bd0 <HAL_TIM_ConfigClockSource+0xe0>
 8002b68:	2b60      	cmp	r3, #96	; 0x60
 8002b6a:	d041      	beq.n	8002bf0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b6c:	e06a      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b72:	d066      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x152>
 8002b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b78:	d017      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002b7a:	e063      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	6899      	ldr	r1, [r3, #8]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f000 fb20 	bl	80031d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	609a      	str	r2, [r3, #8]
      break;
 8002ba8:	e04c      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6899      	ldr	r1, [r3, #8]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f000 fb09 	bl	80031d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bcc:	609a      	str	r2, [r3, #8]
      break;
 8002bce:	e039      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f000 fa7d 	bl	80030dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2150      	movs	r1, #80	; 0x50
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fad6 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 8002bee:	e029      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f000 fa9c 	bl	800313a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2160      	movs	r1, #96	; 0x60
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fac6 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 8002c0e:	e019      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f000 fa5d 	bl	80030dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2140      	movs	r1, #64	; 0x40
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fab6 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 8002c2e:	e009      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f000 faad 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 8002c40:	e000      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a34      	ldr	r2, [pc, #208]	; (8002da8 <TIM_Base_SetConfig+0xe4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00f      	beq.n	8002cfc <TIM_Base_SetConfig+0x38>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d00b      	beq.n	8002cfc <TIM_Base_SetConfig+0x38>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a31      	ldr	r2, [pc, #196]	; (8002dac <TIM_Base_SetConfig+0xe8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d007      	beq.n	8002cfc <TIM_Base_SetConfig+0x38>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a30      	ldr	r2, [pc, #192]	; (8002db0 <TIM_Base_SetConfig+0xec>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_Base_SetConfig+0x38>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a2f      	ldr	r2, [pc, #188]	; (8002db4 <TIM_Base_SetConfig+0xf0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d108      	bne.n	8002d0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a25      	ldr	r2, [pc, #148]	; (8002da8 <TIM_Base_SetConfig+0xe4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01b      	beq.n	8002d4e <TIM_Base_SetConfig+0x8a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d017      	beq.n	8002d4e <TIM_Base_SetConfig+0x8a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a22      	ldr	r2, [pc, #136]	; (8002dac <TIM_Base_SetConfig+0xe8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <TIM_Base_SetConfig+0x8a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a21      	ldr	r2, [pc, #132]	; (8002db0 <TIM_Base_SetConfig+0xec>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00f      	beq.n	8002d4e <TIM_Base_SetConfig+0x8a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a20      	ldr	r2, [pc, #128]	; (8002db4 <TIM_Base_SetConfig+0xf0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00b      	beq.n	8002d4e <TIM_Base_SetConfig+0x8a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <TIM_Base_SetConfig+0xf4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <TIM_Base_SetConfig+0x8a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <TIM_Base_SetConfig+0xf8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d003      	beq.n	8002d4e <TIM_Base_SetConfig+0x8a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <TIM_Base_SetConfig+0xfc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d108      	bne.n	8002d60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <TIM_Base_SetConfig+0xe4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d103      	bne.n	8002d94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	615a      	str	r2, [r3, #20]
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40000c00 	.word	0x40000c00
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	40014800 	.word	0x40014800

08002dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f023 0201 	bic.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0303 	bic.w	r3, r3, #3
 8002dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f023 0302 	bic.w	r3, r3, #2
 8002e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <TIM_OC1_SetConfig+0xc8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d10c      	bne.n	8002e3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f023 0308 	bic.w	r3, r3, #8
 8002e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f023 0304 	bic.w	r3, r3, #4
 8002e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <TIM_OC1_SetConfig+0xc8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d111      	bne.n	8002e66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	621a      	str	r2, [r3, #32]
}
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40010000 	.word	0x40010000

08002e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f023 0210 	bic.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0320 	bic.w	r3, r3, #32
 8002eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <TIM_OC2_SetConfig+0xd4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d10d      	bne.n	8002f0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <TIM_OC2_SetConfig+0xd4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d113      	bne.n	8002f3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	621a      	str	r2, [r3, #32]
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40010000 	.word	0x40010000

08002f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <TIM_OC3_SetConfig+0xd0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d10d      	bne.n	8002fe2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <TIM_OC3_SetConfig+0xd0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d113      	bne.n	8003012 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	621a      	str	r2, [r3, #32]
}
 800302c:	bf00      	nop
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	40010000 	.word	0x40010000

0800303c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	031b      	lsls	r3, r3, #12
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <TIM_OC4_SetConfig+0x9c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d109      	bne.n	80030b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	019b      	lsls	r3, r3, #6
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	621a      	str	r2, [r3, #32]
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40010000 	.word	0x40010000

080030dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f023 0201 	bic.w	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f023 030a 	bic.w	r3, r3, #10
 8003118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	621a      	str	r2, [r3, #32]
}
 800312e:	bf00      	nop
 8003130:	371c      	adds	r7, #28
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800313a:	b480      	push	{r7}
 800313c:	b087      	sub	sp, #28
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	f023 0210 	bic.w	r2, r3, #16
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	031b      	lsls	r3, r3, #12
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f043 0307 	orr.w	r3, r3, #7
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	021a      	lsls	r2, r3, #8
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	609a      	str	r2, [r3, #8]
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2201      	movs	r2, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1a      	ldr	r2, [r3, #32]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	43db      	mvns	r3, r3
 8003232:	401a      	ands	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a1a      	ldr	r2, [r3, #32]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003270:	2302      	movs	r3, #2
 8003272:	e050      	b.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d018      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d013      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a18      	ldr	r2, [pc, #96]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00e      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a16      	ldr	r2, [pc, #88]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a15      	ldr	r2, [pc, #84]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a13      	ldr	r2, [pc, #76]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10c      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40014000 	.word	0x40014000

08003338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003350:	2302      	movs	r3, #2
 8003352:	e03d      	b.n	80033d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e03f      	b.n	8003496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe f88a 	bl	8001544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	; 0x24
 8003434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fb97 	bl	8003b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800345c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800347c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b088      	sub	sp, #32
 80034a2:	af02      	add	r7, sp, #8
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	f040 8083 	bne.w	80035c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_UART_Transmit+0x2e>
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e07b      	b.n	80035c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_UART_Transmit+0x40>
 80034da:	2302      	movs	r3, #2
 80034dc:	e074      	b.n	80035c8 <HAL_UART_Transmit+0x12a>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2221      	movs	r2, #33	; 0x21
 80034f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034f4:	f7fe f93a 	bl	800176c <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800350e:	e042      	b.n	8003596 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003526:	d122      	bne.n	800356e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2200      	movs	r2, #0
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f9b6 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e042      	b.n	80035c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003554:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	3302      	adds	r3, #2
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	e017      	b.n	8003596 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	3301      	adds	r3, #1
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	e013      	b.n	8003596 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f993 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e01f      	b.n	80035c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	60ba      	str	r2, [r7, #8]
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1b7      	bne.n	8003510 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2200      	movs	r2, #0
 80035a8:	2140      	movs	r1, #64	; 0x40
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f97a 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e006      	b.n	80035c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e000      	b.n	80035c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	4613      	mov	r3, r2
 80035dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d140      	bne.n	800366c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_UART_Receive_IT+0x26>
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e039      	b.n	800366e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_UART_Receive_IT+0x38>
 8003604:	2302      	movs	r3, #2
 8003606:	e032      	b.n	800366e <HAL_UART_Receive_IT+0x9e>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	88fa      	ldrh	r2, [r7, #6]
 800361a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2222      	movs	r2, #34	; 0x22
 800362c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003646:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0220 	orr.w	r2, r2, #32
 8003666:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10d      	bne.n	80036ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_UART_IRQHandler+0x52>
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f9d6 	bl	8003a78 <UART_Receive_IT>
      return;
 80036cc:	e0d1      	b.n	8003872 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80b0 	beq.w	8003836 <HAL_UART_IRQHandler+0x1ba>
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <HAL_UART_IRQHandler+0x70>
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80a5 	beq.w	8003836 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_UART_IRQHandler+0x90>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	f043 0201 	orr.w	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_UART_IRQHandler+0xb0>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	f043 0202 	orr.w	r2, r3, #2
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_UART_IRQHandler+0xd0>
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	f043 0204 	orr.w	r2, r3, #4
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00f      	beq.n	8003776 <HAL_UART_IRQHandler+0xfa>
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d104      	bne.n	800376a <HAL_UART_IRQHandler+0xee>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	f043 0208 	orr.w	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d078      	beq.n	8003870 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <HAL_UART_IRQHandler+0x11c>
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f970 	bl	8003a78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	bf0c      	ite	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	2300      	movne	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <HAL_UART_IRQHandler+0x144>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d031      	beq.n	8003824 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8b9 	bl	8003938 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	d123      	bne.n	800381c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f0:	4a21      	ldr	r2, [pc, #132]	; (8003878 <HAL_UART_IRQHandler+0x1fc>)
 80037f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe f8d4 	bl	80019a6 <HAL_DMA_Abort_IT>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d016      	beq.n	8003832 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800380e:	4610      	mov	r0, r2
 8003810:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003812:	e00e      	b.n	8003832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f83b 	bl	8003890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381a:	e00a      	b.n	8003832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f837 	bl	8003890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003822:	e006      	b.n	8003832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f833 	bl	8003890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003830:	e01e      	b.n	8003870 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003832:	bf00      	nop
    return;
 8003834:	e01c      	b.n	8003870 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_UART_IRQHandler+0x1d6>
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8a6 	bl	800399c <UART_Transmit_IT>
    return;
 8003850:	e00f      	b.n	8003872 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_UART_IRQHandler+0x1f6>
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8ee 	bl	8003a48 <UART_EndTransmit_IT>
    return;
 800386c:	bf00      	nop
 800386e:	e000      	b.n	8003872 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003870:	bf00      	nop
  }
}
 8003872:	3720      	adds	r7, #32
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	08003975 	.word	0x08003975

0800387c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b4:	e02c      	b.n	8003910 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d028      	beq.n	8003910 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038c4:	f7fd ff52 	bl	800176c <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d21d      	bcs.n	8003910 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e00f      	b.n	8003930 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4013      	ands	r3, r2
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	429a      	cmp	r2, r3
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	429a      	cmp	r2, r3
 800392c:	d0c3      	beq.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800394e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff ff7e 	bl	8003890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b21      	cmp	r3, #33	; 0x21
 80039ae:	d144      	bne.n	8003a3a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d11a      	bne.n	80039f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	1c9a      	adds	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]
 80039e2:	e00e      	b.n	8003a02 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	621a      	str	r2, [r3, #32]
 80039ee:	e008      	b.n	8003a02 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	1c59      	adds	r1, r3, #1
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6211      	str	r1, [r2, #32]
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10f      	bne.n	8003a36 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff07 	bl	800387c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b22      	cmp	r3, #34	; 0x22
 8003a8a:	d171      	bne.n	8003b70 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a94:	d123      	bne.n	8003ade <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10e      	bne.n	8003ac2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	1c9a      	adds	r2, r3, #2
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac0:	e029      	b.n	8003b16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
 8003adc:	e01b      	b.n	8003b16 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6858      	ldr	r0, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	1c59      	adds	r1, r3, #1
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6291      	str	r1, [r2, #40]	; 0x28
 8003af6:	b2c2      	uxtb	r2, r0
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e00c      	b.n	8003b16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	1c58      	adds	r0, r3, #1
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	6288      	str	r0, [r1, #40]	; 0x28
 8003b0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4619      	mov	r1, r3
 8003b24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d120      	bne.n	8003b6c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0220 	bic.w	r2, r2, #32
 8003b38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd f93a 	bl	8000ddc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e002      	b.n	8003b72 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e000      	b.n	8003b72 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
  }
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003bbe:	f023 030c 	bic.w	r3, r3, #12
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bea:	f040 818b 	bne.w	8003f04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4ac1      	ldr	r2, [pc, #772]	; (8003ef8 <UART_SetConfig+0x37c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d005      	beq.n	8003c04 <UART_SetConfig+0x88>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4abf      	ldr	r2, [pc, #764]	; (8003efc <UART_SetConfig+0x380>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	f040 80bd 	bne.w	8003d7e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c04:	f7fe fcdc 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8003c08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	f04f 0600 	mov.w	r6, #0
 8003c12:	46a8      	mov	r8, r5
 8003c14:	46b1      	mov	r9, r6
 8003c16:	eb18 0308 	adds.w	r3, r8, r8
 8003c1a:	eb49 0409 	adc.w	r4, r9, r9
 8003c1e:	4698      	mov	r8, r3
 8003c20:	46a1      	mov	r9, r4
 8003c22:	eb18 0805 	adds.w	r8, r8, r5
 8003c26:	eb49 0906 	adc.w	r9, r9, r6
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c3e:	4688      	mov	r8, r1
 8003c40:	4691      	mov	r9, r2
 8003c42:	eb18 0005 	adds.w	r0, r8, r5
 8003c46:	eb49 0106 	adc.w	r1, r9, r6
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	461d      	mov	r5, r3
 8003c50:	f04f 0600 	mov.w	r6, #0
 8003c54:	196b      	adds	r3, r5, r5
 8003c56:	eb46 0406 	adc.w	r4, r6, r6
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	f7fc fb17 	bl	8000290 <__aeabi_uldivmod>
 8003c62:	4603      	mov	r3, r0
 8003c64:	460c      	mov	r4, r1
 8003c66:	461a      	mov	r2, r3
 8003c68:	4ba5      	ldr	r3, [pc, #660]	; (8003f00 <UART_SetConfig+0x384>)
 8003c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	461d      	mov	r5, r3
 8003c78:	f04f 0600 	mov.w	r6, #0
 8003c7c:	46a9      	mov	r9, r5
 8003c7e:	46b2      	mov	sl, r6
 8003c80:	eb19 0309 	adds.w	r3, r9, r9
 8003c84:	eb4a 040a 	adc.w	r4, sl, sl
 8003c88:	4699      	mov	r9, r3
 8003c8a:	46a2      	mov	sl, r4
 8003c8c:	eb19 0905 	adds.w	r9, r9, r5
 8003c90:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c94:	f04f 0100 	mov.w	r1, #0
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ca0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ca4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ca8:	4689      	mov	r9, r1
 8003caa:	4692      	mov	sl, r2
 8003cac:	eb19 0005 	adds.w	r0, r9, r5
 8003cb0:	eb4a 0106 	adc.w	r1, sl, r6
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	461d      	mov	r5, r3
 8003cba:	f04f 0600 	mov.w	r6, #0
 8003cbe:	196b      	adds	r3, r5, r5
 8003cc0:	eb46 0406 	adc.w	r4, r6, r6
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4623      	mov	r3, r4
 8003cc8:	f7fc fae2 	bl	8000290 <__aeabi_uldivmod>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b8b      	ldr	r3, [pc, #556]	; (8003f00 <UART_SetConfig+0x384>)
 8003cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	2164      	movs	r1, #100	; 0x64
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	3332      	adds	r3, #50	; 0x32
 8003ce6:	4a86      	ldr	r2, [pc, #536]	; (8003f00 <UART_SetConfig+0x384>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cf4:	4498      	add	r8, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	461d      	mov	r5, r3
 8003cfa:	f04f 0600 	mov.w	r6, #0
 8003cfe:	46a9      	mov	r9, r5
 8003d00:	46b2      	mov	sl, r6
 8003d02:	eb19 0309 	adds.w	r3, r9, r9
 8003d06:	eb4a 040a 	adc.w	r4, sl, sl
 8003d0a:	4699      	mov	r9, r3
 8003d0c:	46a2      	mov	sl, r4
 8003d0e:	eb19 0905 	adds.w	r9, r9, r5
 8003d12:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d2a:	4689      	mov	r9, r1
 8003d2c:	4692      	mov	sl, r2
 8003d2e:	eb19 0005 	adds.w	r0, r9, r5
 8003d32:	eb4a 0106 	adc.w	r1, sl, r6
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	f04f 0600 	mov.w	r6, #0
 8003d40:	196b      	adds	r3, r5, r5
 8003d42:	eb46 0406 	adc.w	r4, r6, r6
 8003d46:	461a      	mov	r2, r3
 8003d48:	4623      	mov	r3, r4
 8003d4a:	f7fc faa1 	bl	8000290 <__aeabi_uldivmod>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	460c      	mov	r4, r1
 8003d52:	461a      	mov	r2, r3
 8003d54:	4b6a      	ldr	r3, [pc, #424]	; (8003f00 <UART_SetConfig+0x384>)
 8003d56:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2164      	movs	r1, #100	; 0x64
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	3332      	adds	r3, #50	; 0x32
 8003d68:	4a65      	ldr	r2, [pc, #404]	; (8003f00 <UART_SetConfig+0x384>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	f003 0207 	and.w	r2, r3, #7
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4442      	add	r2, r8
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	e26f      	b.n	800425e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d7e:	f7fe fc0b 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 8003d82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	461d      	mov	r5, r3
 8003d88:	f04f 0600 	mov.w	r6, #0
 8003d8c:	46a8      	mov	r8, r5
 8003d8e:	46b1      	mov	r9, r6
 8003d90:	eb18 0308 	adds.w	r3, r8, r8
 8003d94:	eb49 0409 	adc.w	r4, r9, r9
 8003d98:	4698      	mov	r8, r3
 8003d9a:	46a1      	mov	r9, r4
 8003d9c:	eb18 0805 	adds.w	r8, r8, r5
 8003da0:	eb49 0906 	adc.w	r9, r9, r6
 8003da4:	f04f 0100 	mov.w	r1, #0
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003db0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003db4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003db8:	4688      	mov	r8, r1
 8003dba:	4691      	mov	r9, r2
 8003dbc:	eb18 0005 	adds.w	r0, r8, r5
 8003dc0:	eb49 0106 	adc.w	r1, r9, r6
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	461d      	mov	r5, r3
 8003dca:	f04f 0600 	mov.w	r6, #0
 8003dce:	196b      	adds	r3, r5, r5
 8003dd0:	eb46 0406 	adc.w	r4, r6, r6
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	f7fc fa5a 	bl	8000290 <__aeabi_uldivmod>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <UART_SetConfig+0x384>)
 8003de4:	fba3 2302 	umull	r2, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	461d      	mov	r5, r3
 8003df2:	f04f 0600 	mov.w	r6, #0
 8003df6:	46a9      	mov	r9, r5
 8003df8:	46b2      	mov	sl, r6
 8003dfa:	eb19 0309 	adds.w	r3, r9, r9
 8003dfe:	eb4a 040a 	adc.w	r4, sl, sl
 8003e02:	4699      	mov	r9, r3
 8003e04:	46a2      	mov	sl, r4
 8003e06:	eb19 0905 	adds.w	r9, r9, r5
 8003e0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e0e:	f04f 0100 	mov.w	r1, #0
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e22:	4689      	mov	r9, r1
 8003e24:	4692      	mov	sl, r2
 8003e26:	eb19 0005 	adds.w	r0, r9, r5
 8003e2a:	eb4a 0106 	adc.w	r1, sl, r6
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	461d      	mov	r5, r3
 8003e34:	f04f 0600 	mov.w	r6, #0
 8003e38:	196b      	adds	r3, r5, r5
 8003e3a:	eb46 0406 	adc.w	r4, r6, r6
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4623      	mov	r3, r4
 8003e42:	f7fc fa25 	bl	8000290 <__aeabi_uldivmod>
 8003e46:	4603      	mov	r3, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <UART_SetConfig+0x384>)
 8003e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	2164      	movs	r1, #100	; 0x64
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	3332      	adds	r3, #50	; 0x32
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <UART_SetConfig+0x384>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e6e:	4498      	add	r8, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	461d      	mov	r5, r3
 8003e74:	f04f 0600 	mov.w	r6, #0
 8003e78:	46a9      	mov	r9, r5
 8003e7a:	46b2      	mov	sl, r6
 8003e7c:	eb19 0309 	adds.w	r3, r9, r9
 8003e80:	eb4a 040a 	adc.w	r4, sl, sl
 8003e84:	4699      	mov	r9, r3
 8003e86:	46a2      	mov	sl, r4
 8003e88:	eb19 0905 	adds.w	r9, r9, r5
 8003e8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e90:	f04f 0100 	mov.w	r1, #0
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ea0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ea4:	4689      	mov	r9, r1
 8003ea6:	4692      	mov	sl, r2
 8003ea8:	eb19 0005 	adds.w	r0, r9, r5
 8003eac:	eb4a 0106 	adc.w	r1, sl, r6
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	461d      	mov	r5, r3
 8003eb6:	f04f 0600 	mov.w	r6, #0
 8003eba:	196b      	adds	r3, r5, r5
 8003ebc:	eb46 0406 	adc.w	r4, r6, r6
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	f7fc f9e4 	bl	8000290 <__aeabi_uldivmod>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <UART_SetConfig+0x384>)
 8003ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	2164      	movs	r1, #100	; 0x64
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	3332      	adds	r3, #50	; 0x32
 8003ee2:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <UART_SetConfig+0x384>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	f003 0207 	and.w	r2, r3, #7
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4442      	add	r2, r8
 8003ef4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003ef6:	e1b2      	b.n	800425e <UART_SetConfig+0x6e2>
 8003ef8:	40011000 	.word	0x40011000
 8003efc:	40011400 	.word	0x40011400
 8003f00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4ad7      	ldr	r2, [pc, #860]	; (8004268 <UART_SetConfig+0x6ec>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d005      	beq.n	8003f1a <UART_SetConfig+0x39e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4ad6      	ldr	r2, [pc, #856]	; (800426c <UART_SetConfig+0x6f0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	f040 80d1 	bne.w	80040bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f1a:	f7fe fb51 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8003f1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	469a      	mov	sl, r3
 8003f24:	f04f 0b00 	mov.w	fp, #0
 8003f28:	46d0      	mov	r8, sl
 8003f2a:	46d9      	mov	r9, fp
 8003f2c:	eb18 0308 	adds.w	r3, r8, r8
 8003f30:	eb49 0409 	adc.w	r4, r9, r9
 8003f34:	4698      	mov	r8, r3
 8003f36:	46a1      	mov	r9, r4
 8003f38:	eb18 080a 	adds.w	r8, r8, sl
 8003f3c:	eb49 090b 	adc.w	r9, r9, fp
 8003f40:	f04f 0100 	mov.w	r1, #0
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f54:	4688      	mov	r8, r1
 8003f56:	4691      	mov	r9, r2
 8003f58:	eb1a 0508 	adds.w	r5, sl, r8
 8003f5c:	eb4b 0609 	adc.w	r6, fp, r9
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4619      	mov	r1, r3
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	f04f 0400 	mov.w	r4, #0
 8003f72:	0094      	lsls	r4, r2, #2
 8003f74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f78:	008b      	lsls	r3, r1, #2
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4623      	mov	r3, r4
 8003f7e:	4628      	mov	r0, r5
 8003f80:	4631      	mov	r1, r6
 8003f82:	f7fc f985 	bl	8000290 <__aeabi_uldivmod>
 8003f86:	4603      	mov	r3, r0
 8003f88:	460c      	mov	r4, r1
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4bb8      	ldr	r3, [pc, #736]	; (8004270 <UART_SetConfig+0x6f4>)
 8003f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	469b      	mov	fp, r3
 8003f9c:	f04f 0c00 	mov.w	ip, #0
 8003fa0:	46d9      	mov	r9, fp
 8003fa2:	46e2      	mov	sl, ip
 8003fa4:	eb19 0309 	adds.w	r3, r9, r9
 8003fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8003fac:	4699      	mov	r9, r3
 8003fae:	46a2      	mov	sl, r4
 8003fb0:	eb19 090b 	adds.w	r9, r9, fp
 8003fb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fcc:	4689      	mov	r9, r1
 8003fce:	4692      	mov	sl, r2
 8003fd0:	eb1b 0509 	adds.w	r5, fp, r9
 8003fd4:	eb4c 060a 	adc.w	r6, ip, sl
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	f04f 0400 	mov.w	r4, #0
 8003fea:	0094      	lsls	r4, r2, #2
 8003fec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ff0:	008b      	lsls	r3, r1, #2
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4623      	mov	r3, r4
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	f7fc f949 	bl	8000290 <__aeabi_uldivmod>
 8003ffe:	4603      	mov	r3, r0
 8004000:	460c      	mov	r4, r1
 8004002:	461a      	mov	r2, r3
 8004004:	4b9a      	ldr	r3, [pc, #616]	; (8004270 <UART_SetConfig+0x6f4>)
 8004006:	fba3 1302 	umull	r1, r3, r3, r2
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	2164      	movs	r1, #100	; 0x64
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	3332      	adds	r3, #50	; 0x32
 8004018:	4a95      	ldr	r2, [pc, #596]	; (8004270 <UART_SetConfig+0x6f4>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004024:	4498      	add	r8, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	469b      	mov	fp, r3
 800402a:	f04f 0c00 	mov.w	ip, #0
 800402e:	46d9      	mov	r9, fp
 8004030:	46e2      	mov	sl, ip
 8004032:	eb19 0309 	adds.w	r3, r9, r9
 8004036:	eb4a 040a 	adc.w	r4, sl, sl
 800403a:	4699      	mov	r9, r3
 800403c:	46a2      	mov	sl, r4
 800403e:	eb19 090b 	adds.w	r9, r9, fp
 8004042:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004052:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004056:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800405a:	4689      	mov	r9, r1
 800405c:	4692      	mov	sl, r2
 800405e:	eb1b 0509 	adds.w	r5, fp, r9
 8004062:	eb4c 060a 	adc.w	r6, ip, sl
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4619      	mov	r1, r3
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	f04f 0400 	mov.w	r4, #0
 8004078:	0094      	lsls	r4, r2, #2
 800407a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800407e:	008b      	lsls	r3, r1, #2
 8004080:	461a      	mov	r2, r3
 8004082:	4623      	mov	r3, r4
 8004084:	4628      	mov	r0, r5
 8004086:	4631      	mov	r1, r6
 8004088:	f7fc f902 	bl	8000290 <__aeabi_uldivmod>
 800408c:	4603      	mov	r3, r0
 800408e:	460c      	mov	r4, r1
 8004090:	461a      	mov	r2, r3
 8004092:	4b77      	ldr	r3, [pc, #476]	; (8004270 <UART_SetConfig+0x6f4>)
 8004094:	fba3 1302 	umull	r1, r3, r3, r2
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	2164      	movs	r1, #100	; 0x64
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	3332      	adds	r3, #50	; 0x32
 80040a6:	4a72      	ldr	r2, [pc, #456]	; (8004270 <UART_SetConfig+0x6f4>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	f003 020f 	and.w	r2, r3, #15
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4442      	add	r2, r8
 80040b8:	609a      	str	r2, [r3, #8]
 80040ba:	e0d0      	b.n	800425e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80040bc:	f7fe fa6c 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 80040c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	469a      	mov	sl, r3
 80040c6:	f04f 0b00 	mov.w	fp, #0
 80040ca:	46d0      	mov	r8, sl
 80040cc:	46d9      	mov	r9, fp
 80040ce:	eb18 0308 	adds.w	r3, r8, r8
 80040d2:	eb49 0409 	adc.w	r4, r9, r9
 80040d6:	4698      	mov	r8, r3
 80040d8:	46a1      	mov	r9, r4
 80040da:	eb18 080a 	adds.w	r8, r8, sl
 80040de:	eb49 090b 	adc.w	r9, r9, fp
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040f6:	4688      	mov	r8, r1
 80040f8:	4691      	mov	r9, r2
 80040fa:	eb1a 0508 	adds.w	r5, sl, r8
 80040fe:	eb4b 0609 	adc.w	r6, fp, r9
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4619      	mov	r1, r3
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	f04f 0400 	mov.w	r4, #0
 8004114:	0094      	lsls	r4, r2, #2
 8004116:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800411a:	008b      	lsls	r3, r1, #2
 800411c:	461a      	mov	r2, r3
 800411e:	4623      	mov	r3, r4
 8004120:	4628      	mov	r0, r5
 8004122:	4631      	mov	r1, r6
 8004124:	f7fc f8b4 	bl	8000290 <__aeabi_uldivmod>
 8004128:	4603      	mov	r3, r0
 800412a:	460c      	mov	r4, r1
 800412c:	461a      	mov	r2, r3
 800412e:	4b50      	ldr	r3, [pc, #320]	; (8004270 <UART_SetConfig+0x6f4>)
 8004130:	fba3 2302 	umull	r2, r3, r3, r2
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	469b      	mov	fp, r3
 800413e:	f04f 0c00 	mov.w	ip, #0
 8004142:	46d9      	mov	r9, fp
 8004144:	46e2      	mov	sl, ip
 8004146:	eb19 0309 	adds.w	r3, r9, r9
 800414a:	eb4a 040a 	adc.w	r4, sl, sl
 800414e:	4699      	mov	r9, r3
 8004150:	46a2      	mov	sl, r4
 8004152:	eb19 090b 	adds.w	r9, r9, fp
 8004156:	eb4a 0a0c 	adc.w	sl, sl, ip
 800415a:	f04f 0100 	mov.w	r1, #0
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004166:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800416a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800416e:	4689      	mov	r9, r1
 8004170:	4692      	mov	sl, r2
 8004172:	eb1b 0509 	adds.w	r5, fp, r9
 8004176:	eb4c 060a 	adc.w	r6, ip, sl
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4619      	mov	r1, r3
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	f04f 0400 	mov.w	r4, #0
 800418c:	0094      	lsls	r4, r2, #2
 800418e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004192:	008b      	lsls	r3, r1, #2
 8004194:	461a      	mov	r2, r3
 8004196:	4623      	mov	r3, r4
 8004198:	4628      	mov	r0, r5
 800419a:	4631      	mov	r1, r6
 800419c:	f7fc f878 	bl	8000290 <__aeabi_uldivmod>
 80041a0:	4603      	mov	r3, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	461a      	mov	r2, r3
 80041a6:	4b32      	ldr	r3, [pc, #200]	; (8004270 <UART_SetConfig+0x6f4>)
 80041a8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	2164      	movs	r1, #100	; 0x64
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	3332      	adds	r3, #50	; 0x32
 80041ba:	4a2d      	ldr	r2, [pc, #180]	; (8004270 <UART_SetConfig+0x6f4>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c6:	4498      	add	r8, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	469b      	mov	fp, r3
 80041cc:	f04f 0c00 	mov.w	ip, #0
 80041d0:	46d9      	mov	r9, fp
 80041d2:	46e2      	mov	sl, ip
 80041d4:	eb19 0309 	adds.w	r3, r9, r9
 80041d8:	eb4a 040a 	adc.w	r4, sl, sl
 80041dc:	4699      	mov	r9, r3
 80041de:	46a2      	mov	sl, r4
 80041e0:	eb19 090b 	adds.w	r9, r9, fp
 80041e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041e8:	f04f 0100 	mov.w	r1, #0
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041fc:	4689      	mov	r9, r1
 80041fe:	4692      	mov	sl, r2
 8004200:	eb1b 0509 	adds.w	r5, fp, r9
 8004204:	eb4c 060a 	adc.w	r6, ip, sl
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4619      	mov	r1, r3
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	f04f 0400 	mov.w	r4, #0
 800421a:	0094      	lsls	r4, r2, #2
 800421c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004220:	008b      	lsls	r3, r1, #2
 8004222:	461a      	mov	r2, r3
 8004224:	4623      	mov	r3, r4
 8004226:	4628      	mov	r0, r5
 8004228:	4631      	mov	r1, r6
 800422a:	f7fc f831 	bl	8000290 <__aeabi_uldivmod>
 800422e:	4603      	mov	r3, r0
 8004230:	460c      	mov	r4, r1
 8004232:	461a      	mov	r2, r3
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <UART_SetConfig+0x6f4>)
 8004236:	fba3 1302 	umull	r1, r3, r3, r2
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2164      	movs	r1, #100	; 0x64
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	3332      	adds	r3, #50	; 0x32
 8004248:	4a09      	ldr	r2, [pc, #36]	; (8004270 <UART_SetConfig+0x6f4>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	f003 020f 	and.w	r2, r3, #15
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4442      	add	r2, r8
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	e7ff      	b.n	800425e <UART_SetConfig+0x6e2>
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004268:	40011000 	.word	0x40011000
 800426c:	40011400 	.word	0x40011400
 8004270:	51eb851f 	.word	0x51eb851f

08004274 <atoi>:
 8004274:	220a      	movs	r2, #10
 8004276:	2100      	movs	r1, #0
 8004278:	f000 b8d6 	b.w	8004428 <strtol>

0800427c <__errno>:
 800427c:	4b01      	ldr	r3, [pc, #4]	; (8004284 <__errno+0x8>)
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	2000000c 	.word	0x2000000c

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4e0d      	ldr	r6, [pc, #52]	; (80042c0 <__libc_init_array+0x38>)
 800428c:	4c0d      	ldr	r4, [pc, #52]	; (80042c4 <__libc_init_array+0x3c>)
 800428e:	1ba4      	subs	r4, r4, r6
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	2500      	movs	r5, #0
 8004294:	42a5      	cmp	r5, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	4e0b      	ldr	r6, [pc, #44]	; (80042c8 <__libc_init_array+0x40>)
 800429a:	4c0c      	ldr	r4, [pc, #48]	; (80042cc <__libc_init_array+0x44>)
 800429c:	f000 fce4 	bl	8004c68 <_init>
 80042a0:	1ba4      	subs	r4, r4, r6
 80042a2:	10a4      	asrs	r4, r4, #2
 80042a4:	2500      	movs	r5, #0
 80042a6:	42a5      	cmp	r5, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042b0:	4798      	blx	r3
 80042b2:	3501      	adds	r5, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042ba:	4798      	blx	r3
 80042bc:	3501      	adds	r5, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	08004e6c 	.word	0x08004e6c
 80042c4:	08004e6c 	.word	0x08004e6c
 80042c8:	08004e6c 	.word	0x08004e6c
 80042cc:	08004e70 	.word	0x08004e70

080042d0 <memset>:
 80042d0:	4402      	add	r2, r0
 80042d2:	4603      	mov	r3, r0
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d100      	bne.n	80042da <memset+0xa>
 80042d8:	4770      	bx	lr
 80042da:	f803 1b01 	strb.w	r1, [r3], #1
 80042de:	e7f9      	b.n	80042d4 <memset+0x4>

080042e0 <siprintf>:
 80042e0:	b40e      	push	{r1, r2, r3}
 80042e2:	b500      	push	{lr}
 80042e4:	b09c      	sub	sp, #112	; 0x70
 80042e6:	ab1d      	add	r3, sp, #116	; 0x74
 80042e8:	9002      	str	r0, [sp, #8]
 80042ea:	9006      	str	r0, [sp, #24]
 80042ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042f0:	4809      	ldr	r0, [pc, #36]	; (8004318 <siprintf+0x38>)
 80042f2:	9107      	str	r1, [sp, #28]
 80042f4:	9104      	str	r1, [sp, #16]
 80042f6:	4909      	ldr	r1, [pc, #36]	; (800431c <siprintf+0x3c>)
 80042f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80042fc:	9105      	str	r1, [sp, #20]
 80042fe:	6800      	ldr	r0, [r0, #0]
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	a902      	add	r1, sp, #8
 8004304:	f000 f916 	bl	8004534 <_svfiprintf_r>
 8004308:	9b02      	ldr	r3, [sp, #8]
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	b01c      	add	sp, #112	; 0x70
 8004310:	f85d eb04 	ldr.w	lr, [sp], #4
 8004314:	b003      	add	sp, #12
 8004316:	4770      	bx	lr
 8004318:	2000000c 	.word	0x2000000c
 800431c:	ffff0208 	.word	0xffff0208

08004320 <strcpy>:
 8004320:	4603      	mov	r3, r0
 8004322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004326:	f803 2b01 	strb.w	r2, [r3], #1
 800432a:	2a00      	cmp	r2, #0
 800432c:	d1f9      	bne.n	8004322 <strcpy+0x2>
 800432e:	4770      	bx	lr

08004330 <_strtol_l.isra.0>:
 8004330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004334:	4680      	mov	r8, r0
 8004336:	4689      	mov	r9, r1
 8004338:	4692      	mov	sl, r2
 800433a:	461e      	mov	r6, r3
 800433c:	460f      	mov	r7, r1
 800433e:	463d      	mov	r5, r7
 8004340:	9808      	ldr	r0, [sp, #32]
 8004342:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004346:	f000 f885 	bl	8004454 <__locale_ctype_ptr_l>
 800434a:	4420      	add	r0, r4
 800434c:	7843      	ldrb	r3, [r0, #1]
 800434e:	f013 0308 	ands.w	r3, r3, #8
 8004352:	d132      	bne.n	80043ba <_strtol_l.isra.0+0x8a>
 8004354:	2c2d      	cmp	r4, #45	; 0x2d
 8004356:	d132      	bne.n	80043be <_strtol_l.isra.0+0x8e>
 8004358:	787c      	ldrb	r4, [r7, #1]
 800435a:	1cbd      	adds	r5, r7, #2
 800435c:	2201      	movs	r2, #1
 800435e:	2e00      	cmp	r6, #0
 8004360:	d05d      	beq.n	800441e <_strtol_l.isra.0+0xee>
 8004362:	2e10      	cmp	r6, #16
 8004364:	d109      	bne.n	800437a <_strtol_l.isra.0+0x4a>
 8004366:	2c30      	cmp	r4, #48	; 0x30
 8004368:	d107      	bne.n	800437a <_strtol_l.isra.0+0x4a>
 800436a:	782b      	ldrb	r3, [r5, #0]
 800436c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004370:	2b58      	cmp	r3, #88	; 0x58
 8004372:	d14f      	bne.n	8004414 <_strtol_l.isra.0+0xe4>
 8004374:	786c      	ldrb	r4, [r5, #1]
 8004376:	2610      	movs	r6, #16
 8004378:	3502      	adds	r5, #2
 800437a:	2a00      	cmp	r2, #0
 800437c:	bf14      	ite	ne
 800437e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004382:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004386:	2700      	movs	r7, #0
 8004388:	fbb1 fcf6 	udiv	ip, r1, r6
 800438c:	4638      	mov	r0, r7
 800438e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004392:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004396:	2b09      	cmp	r3, #9
 8004398:	d817      	bhi.n	80043ca <_strtol_l.isra.0+0x9a>
 800439a:	461c      	mov	r4, r3
 800439c:	42a6      	cmp	r6, r4
 800439e:	dd23      	ble.n	80043e8 <_strtol_l.isra.0+0xb8>
 80043a0:	1c7b      	adds	r3, r7, #1
 80043a2:	d007      	beq.n	80043b4 <_strtol_l.isra.0+0x84>
 80043a4:	4584      	cmp	ip, r0
 80043a6:	d31c      	bcc.n	80043e2 <_strtol_l.isra.0+0xb2>
 80043a8:	d101      	bne.n	80043ae <_strtol_l.isra.0+0x7e>
 80043aa:	45a6      	cmp	lr, r4
 80043ac:	db19      	blt.n	80043e2 <_strtol_l.isra.0+0xb2>
 80043ae:	fb00 4006 	mla	r0, r0, r6, r4
 80043b2:	2701      	movs	r7, #1
 80043b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043b8:	e7eb      	b.n	8004392 <_strtol_l.isra.0+0x62>
 80043ba:	462f      	mov	r7, r5
 80043bc:	e7bf      	b.n	800433e <_strtol_l.isra.0+0xe>
 80043be:	2c2b      	cmp	r4, #43	; 0x2b
 80043c0:	bf04      	itt	eq
 80043c2:	1cbd      	addeq	r5, r7, #2
 80043c4:	787c      	ldrbeq	r4, [r7, #1]
 80043c6:	461a      	mov	r2, r3
 80043c8:	e7c9      	b.n	800435e <_strtol_l.isra.0+0x2e>
 80043ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80043ce:	2b19      	cmp	r3, #25
 80043d0:	d801      	bhi.n	80043d6 <_strtol_l.isra.0+0xa6>
 80043d2:	3c37      	subs	r4, #55	; 0x37
 80043d4:	e7e2      	b.n	800439c <_strtol_l.isra.0+0x6c>
 80043d6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80043da:	2b19      	cmp	r3, #25
 80043dc:	d804      	bhi.n	80043e8 <_strtol_l.isra.0+0xb8>
 80043de:	3c57      	subs	r4, #87	; 0x57
 80043e0:	e7dc      	b.n	800439c <_strtol_l.isra.0+0x6c>
 80043e2:	f04f 37ff 	mov.w	r7, #4294967295
 80043e6:	e7e5      	b.n	80043b4 <_strtol_l.isra.0+0x84>
 80043e8:	1c7b      	adds	r3, r7, #1
 80043ea:	d108      	bne.n	80043fe <_strtol_l.isra.0+0xce>
 80043ec:	2322      	movs	r3, #34	; 0x22
 80043ee:	f8c8 3000 	str.w	r3, [r8]
 80043f2:	4608      	mov	r0, r1
 80043f4:	f1ba 0f00 	cmp.w	sl, #0
 80043f8:	d107      	bne.n	800440a <_strtol_l.isra.0+0xda>
 80043fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fe:	b102      	cbz	r2, 8004402 <_strtol_l.isra.0+0xd2>
 8004400:	4240      	negs	r0, r0
 8004402:	f1ba 0f00 	cmp.w	sl, #0
 8004406:	d0f8      	beq.n	80043fa <_strtol_l.isra.0+0xca>
 8004408:	b10f      	cbz	r7, 800440e <_strtol_l.isra.0+0xde>
 800440a:	f105 39ff 	add.w	r9, r5, #4294967295
 800440e:	f8ca 9000 	str.w	r9, [sl]
 8004412:	e7f2      	b.n	80043fa <_strtol_l.isra.0+0xca>
 8004414:	2430      	movs	r4, #48	; 0x30
 8004416:	2e00      	cmp	r6, #0
 8004418:	d1af      	bne.n	800437a <_strtol_l.isra.0+0x4a>
 800441a:	2608      	movs	r6, #8
 800441c:	e7ad      	b.n	800437a <_strtol_l.isra.0+0x4a>
 800441e:	2c30      	cmp	r4, #48	; 0x30
 8004420:	d0a3      	beq.n	800436a <_strtol_l.isra.0+0x3a>
 8004422:	260a      	movs	r6, #10
 8004424:	e7a9      	b.n	800437a <_strtol_l.isra.0+0x4a>
	...

08004428 <strtol>:
 8004428:	4b08      	ldr	r3, [pc, #32]	; (800444c <strtol+0x24>)
 800442a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800442c:	681c      	ldr	r4, [r3, #0]
 800442e:	4d08      	ldr	r5, [pc, #32]	; (8004450 <strtol+0x28>)
 8004430:	6a23      	ldr	r3, [r4, #32]
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf08      	it	eq
 8004436:	462b      	moveq	r3, r5
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	460a      	mov	r2, r1
 800443e:	4601      	mov	r1, r0
 8004440:	4620      	mov	r0, r4
 8004442:	f7ff ff75 	bl	8004330 <_strtol_l.isra.0>
 8004446:	b003      	add	sp, #12
 8004448:	bd30      	pop	{r4, r5, pc}
 800444a:	bf00      	nop
 800444c:	2000000c 	.word	0x2000000c
 8004450:	20000070 	.word	0x20000070

08004454 <__locale_ctype_ptr_l>:
 8004454:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004458:	4770      	bx	lr

0800445a <__ascii_mbtowc>:
 800445a:	b082      	sub	sp, #8
 800445c:	b901      	cbnz	r1, 8004460 <__ascii_mbtowc+0x6>
 800445e:	a901      	add	r1, sp, #4
 8004460:	b142      	cbz	r2, 8004474 <__ascii_mbtowc+0x1a>
 8004462:	b14b      	cbz	r3, 8004478 <__ascii_mbtowc+0x1e>
 8004464:	7813      	ldrb	r3, [r2, #0]
 8004466:	600b      	str	r3, [r1, #0]
 8004468:	7812      	ldrb	r2, [r2, #0]
 800446a:	1c10      	adds	r0, r2, #0
 800446c:	bf18      	it	ne
 800446e:	2001      	movne	r0, #1
 8004470:	b002      	add	sp, #8
 8004472:	4770      	bx	lr
 8004474:	4610      	mov	r0, r2
 8004476:	e7fb      	b.n	8004470 <__ascii_mbtowc+0x16>
 8004478:	f06f 0001 	mvn.w	r0, #1
 800447c:	e7f8      	b.n	8004470 <__ascii_mbtowc+0x16>

0800447e <__ssputs_r>:
 800447e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004482:	688e      	ldr	r6, [r1, #8]
 8004484:	429e      	cmp	r6, r3
 8004486:	4682      	mov	sl, r0
 8004488:	460c      	mov	r4, r1
 800448a:	4690      	mov	r8, r2
 800448c:	4699      	mov	r9, r3
 800448e:	d837      	bhi.n	8004500 <__ssputs_r+0x82>
 8004490:	898a      	ldrh	r2, [r1, #12]
 8004492:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004496:	d031      	beq.n	80044fc <__ssputs_r+0x7e>
 8004498:	6825      	ldr	r5, [r4, #0]
 800449a:	6909      	ldr	r1, [r1, #16]
 800449c:	1a6f      	subs	r7, r5, r1
 800449e:	6965      	ldr	r5, [r4, #20]
 80044a0:	2302      	movs	r3, #2
 80044a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044a6:	fb95 f5f3 	sdiv	r5, r5, r3
 80044aa:	f109 0301 	add.w	r3, r9, #1
 80044ae:	443b      	add	r3, r7
 80044b0:	429d      	cmp	r5, r3
 80044b2:	bf38      	it	cc
 80044b4:	461d      	movcc	r5, r3
 80044b6:	0553      	lsls	r3, r2, #21
 80044b8:	d530      	bpl.n	800451c <__ssputs_r+0x9e>
 80044ba:	4629      	mov	r1, r5
 80044bc:	f000 fb3a 	bl	8004b34 <_malloc_r>
 80044c0:	4606      	mov	r6, r0
 80044c2:	b950      	cbnz	r0, 80044da <__ssputs_r+0x5c>
 80044c4:	230c      	movs	r3, #12
 80044c6:	f8ca 3000 	str.w	r3, [sl]
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d0:	81a3      	strh	r3, [r4, #12]
 80044d2:	f04f 30ff 	mov.w	r0, #4294967295
 80044d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044da:	463a      	mov	r2, r7
 80044dc:	6921      	ldr	r1, [r4, #16]
 80044de:	f000 fab6 	bl	8004a4e <memcpy>
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	6126      	str	r6, [r4, #16]
 80044f0:	6165      	str	r5, [r4, #20]
 80044f2:	443e      	add	r6, r7
 80044f4:	1bed      	subs	r5, r5, r7
 80044f6:	6026      	str	r6, [r4, #0]
 80044f8:	60a5      	str	r5, [r4, #8]
 80044fa:	464e      	mov	r6, r9
 80044fc:	454e      	cmp	r6, r9
 80044fe:	d900      	bls.n	8004502 <__ssputs_r+0x84>
 8004500:	464e      	mov	r6, r9
 8004502:	4632      	mov	r2, r6
 8004504:	4641      	mov	r1, r8
 8004506:	6820      	ldr	r0, [r4, #0]
 8004508:	f000 faac 	bl	8004a64 <memmove>
 800450c:	68a3      	ldr	r3, [r4, #8]
 800450e:	1b9b      	subs	r3, r3, r6
 8004510:	60a3      	str	r3, [r4, #8]
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	441e      	add	r6, r3
 8004516:	6026      	str	r6, [r4, #0]
 8004518:	2000      	movs	r0, #0
 800451a:	e7dc      	b.n	80044d6 <__ssputs_r+0x58>
 800451c:	462a      	mov	r2, r5
 800451e:	f000 fb63 	bl	8004be8 <_realloc_r>
 8004522:	4606      	mov	r6, r0
 8004524:	2800      	cmp	r0, #0
 8004526:	d1e2      	bne.n	80044ee <__ssputs_r+0x70>
 8004528:	6921      	ldr	r1, [r4, #16]
 800452a:	4650      	mov	r0, sl
 800452c:	f000 fab4 	bl	8004a98 <_free_r>
 8004530:	e7c8      	b.n	80044c4 <__ssputs_r+0x46>
	...

08004534 <_svfiprintf_r>:
 8004534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004538:	461d      	mov	r5, r3
 800453a:	898b      	ldrh	r3, [r1, #12]
 800453c:	061f      	lsls	r7, r3, #24
 800453e:	b09d      	sub	sp, #116	; 0x74
 8004540:	4680      	mov	r8, r0
 8004542:	460c      	mov	r4, r1
 8004544:	4616      	mov	r6, r2
 8004546:	d50f      	bpl.n	8004568 <_svfiprintf_r+0x34>
 8004548:	690b      	ldr	r3, [r1, #16]
 800454a:	b96b      	cbnz	r3, 8004568 <_svfiprintf_r+0x34>
 800454c:	2140      	movs	r1, #64	; 0x40
 800454e:	f000 faf1 	bl	8004b34 <_malloc_r>
 8004552:	6020      	str	r0, [r4, #0]
 8004554:	6120      	str	r0, [r4, #16]
 8004556:	b928      	cbnz	r0, 8004564 <_svfiprintf_r+0x30>
 8004558:	230c      	movs	r3, #12
 800455a:	f8c8 3000 	str.w	r3, [r8]
 800455e:	f04f 30ff 	mov.w	r0, #4294967295
 8004562:	e0c8      	b.n	80046f6 <_svfiprintf_r+0x1c2>
 8004564:	2340      	movs	r3, #64	; 0x40
 8004566:	6163      	str	r3, [r4, #20]
 8004568:	2300      	movs	r3, #0
 800456a:	9309      	str	r3, [sp, #36]	; 0x24
 800456c:	2320      	movs	r3, #32
 800456e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004572:	2330      	movs	r3, #48	; 0x30
 8004574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004578:	9503      	str	r5, [sp, #12]
 800457a:	f04f 0b01 	mov.w	fp, #1
 800457e:	4637      	mov	r7, r6
 8004580:	463d      	mov	r5, r7
 8004582:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004586:	b10b      	cbz	r3, 800458c <_svfiprintf_r+0x58>
 8004588:	2b25      	cmp	r3, #37	; 0x25
 800458a:	d13e      	bne.n	800460a <_svfiprintf_r+0xd6>
 800458c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004590:	d00b      	beq.n	80045aa <_svfiprintf_r+0x76>
 8004592:	4653      	mov	r3, sl
 8004594:	4632      	mov	r2, r6
 8004596:	4621      	mov	r1, r4
 8004598:	4640      	mov	r0, r8
 800459a:	f7ff ff70 	bl	800447e <__ssputs_r>
 800459e:	3001      	adds	r0, #1
 80045a0:	f000 80a4 	beq.w	80046ec <_svfiprintf_r+0x1b8>
 80045a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a6:	4453      	add	r3, sl
 80045a8:	9309      	str	r3, [sp, #36]	; 0x24
 80045aa:	783b      	ldrb	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 809d 	beq.w	80046ec <_svfiprintf_r+0x1b8>
 80045b2:	2300      	movs	r3, #0
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045bc:	9304      	str	r3, [sp, #16]
 80045be:	9307      	str	r3, [sp, #28]
 80045c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045c4:	931a      	str	r3, [sp, #104]	; 0x68
 80045c6:	462f      	mov	r7, r5
 80045c8:	2205      	movs	r2, #5
 80045ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80045ce:	4850      	ldr	r0, [pc, #320]	; (8004710 <_svfiprintf_r+0x1dc>)
 80045d0:	f7fb fe0e 	bl	80001f0 <memchr>
 80045d4:	9b04      	ldr	r3, [sp, #16]
 80045d6:	b9d0      	cbnz	r0, 800460e <_svfiprintf_r+0xda>
 80045d8:	06d9      	lsls	r1, r3, #27
 80045da:	bf44      	itt	mi
 80045dc:	2220      	movmi	r2, #32
 80045de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045e2:	071a      	lsls	r2, r3, #28
 80045e4:	bf44      	itt	mi
 80045e6:	222b      	movmi	r2, #43	; 0x2b
 80045e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045ec:	782a      	ldrb	r2, [r5, #0]
 80045ee:	2a2a      	cmp	r2, #42	; 0x2a
 80045f0:	d015      	beq.n	800461e <_svfiprintf_r+0xea>
 80045f2:	9a07      	ldr	r2, [sp, #28]
 80045f4:	462f      	mov	r7, r5
 80045f6:	2000      	movs	r0, #0
 80045f8:	250a      	movs	r5, #10
 80045fa:	4639      	mov	r1, r7
 80045fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004600:	3b30      	subs	r3, #48	; 0x30
 8004602:	2b09      	cmp	r3, #9
 8004604:	d94d      	bls.n	80046a2 <_svfiprintf_r+0x16e>
 8004606:	b1b8      	cbz	r0, 8004638 <_svfiprintf_r+0x104>
 8004608:	e00f      	b.n	800462a <_svfiprintf_r+0xf6>
 800460a:	462f      	mov	r7, r5
 800460c:	e7b8      	b.n	8004580 <_svfiprintf_r+0x4c>
 800460e:	4a40      	ldr	r2, [pc, #256]	; (8004710 <_svfiprintf_r+0x1dc>)
 8004610:	1a80      	subs	r0, r0, r2
 8004612:	fa0b f000 	lsl.w	r0, fp, r0
 8004616:	4318      	orrs	r0, r3
 8004618:	9004      	str	r0, [sp, #16]
 800461a:	463d      	mov	r5, r7
 800461c:	e7d3      	b.n	80045c6 <_svfiprintf_r+0x92>
 800461e:	9a03      	ldr	r2, [sp, #12]
 8004620:	1d11      	adds	r1, r2, #4
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	9103      	str	r1, [sp, #12]
 8004626:	2a00      	cmp	r2, #0
 8004628:	db01      	blt.n	800462e <_svfiprintf_r+0xfa>
 800462a:	9207      	str	r2, [sp, #28]
 800462c:	e004      	b.n	8004638 <_svfiprintf_r+0x104>
 800462e:	4252      	negs	r2, r2
 8004630:	f043 0302 	orr.w	r3, r3, #2
 8004634:	9207      	str	r2, [sp, #28]
 8004636:	9304      	str	r3, [sp, #16]
 8004638:	783b      	ldrb	r3, [r7, #0]
 800463a:	2b2e      	cmp	r3, #46	; 0x2e
 800463c:	d10c      	bne.n	8004658 <_svfiprintf_r+0x124>
 800463e:	787b      	ldrb	r3, [r7, #1]
 8004640:	2b2a      	cmp	r3, #42	; 0x2a
 8004642:	d133      	bne.n	80046ac <_svfiprintf_r+0x178>
 8004644:	9b03      	ldr	r3, [sp, #12]
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	9203      	str	r2, [sp, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	bfb8      	it	lt
 8004650:	f04f 33ff 	movlt.w	r3, #4294967295
 8004654:	3702      	adds	r7, #2
 8004656:	9305      	str	r3, [sp, #20]
 8004658:	4d2e      	ldr	r5, [pc, #184]	; (8004714 <_svfiprintf_r+0x1e0>)
 800465a:	7839      	ldrb	r1, [r7, #0]
 800465c:	2203      	movs	r2, #3
 800465e:	4628      	mov	r0, r5
 8004660:	f7fb fdc6 	bl	80001f0 <memchr>
 8004664:	b138      	cbz	r0, 8004676 <_svfiprintf_r+0x142>
 8004666:	2340      	movs	r3, #64	; 0x40
 8004668:	1b40      	subs	r0, r0, r5
 800466a:	fa03 f000 	lsl.w	r0, r3, r0
 800466e:	9b04      	ldr	r3, [sp, #16]
 8004670:	4303      	orrs	r3, r0
 8004672:	3701      	adds	r7, #1
 8004674:	9304      	str	r3, [sp, #16]
 8004676:	7839      	ldrb	r1, [r7, #0]
 8004678:	4827      	ldr	r0, [pc, #156]	; (8004718 <_svfiprintf_r+0x1e4>)
 800467a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800467e:	2206      	movs	r2, #6
 8004680:	1c7e      	adds	r6, r7, #1
 8004682:	f7fb fdb5 	bl	80001f0 <memchr>
 8004686:	2800      	cmp	r0, #0
 8004688:	d038      	beq.n	80046fc <_svfiprintf_r+0x1c8>
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <_svfiprintf_r+0x1e8>)
 800468c:	bb13      	cbnz	r3, 80046d4 <_svfiprintf_r+0x1a0>
 800468e:	9b03      	ldr	r3, [sp, #12]
 8004690:	3307      	adds	r3, #7
 8004692:	f023 0307 	bic.w	r3, r3, #7
 8004696:	3308      	adds	r3, #8
 8004698:	9303      	str	r3, [sp, #12]
 800469a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800469c:	444b      	add	r3, r9
 800469e:	9309      	str	r3, [sp, #36]	; 0x24
 80046a0:	e76d      	b.n	800457e <_svfiprintf_r+0x4a>
 80046a2:	fb05 3202 	mla	r2, r5, r2, r3
 80046a6:	2001      	movs	r0, #1
 80046a8:	460f      	mov	r7, r1
 80046aa:	e7a6      	b.n	80045fa <_svfiprintf_r+0xc6>
 80046ac:	2300      	movs	r3, #0
 80046ae:	3701      	adds	r7, #1
 80046b0:	9305      	str	r3, [sp, #20]
 80046b2:	4619      	mov	r1, r3
 80046b4:	250a      	movs	r5, #10
 80046b6:	4638      	mov	r0, r7
 80046b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046bc:	3a30      	subs	r2, #48	; 0x30
 80046be:	2a09      	cmp	r2, #9
 80046c0:	d903      	bls.n	80046ca <_svfiprintf_r+0x196>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0c8      	beq.n	8004658 <_svfiprintf_r+0x124>
 80046c6:	9105      	str	r1, [sp, #20]
 80046c8:	e7c6      	b.n	8004658 <_svfiprintf_r+0x124>
 80046ca:	fb05 2101 	mla	r1, r5, r1, r2
 80046ce:	2301      	movs	r3, #1
 80046d0:	4607      	mov	r7, r0
 80046d2:	e7f0      	b.n	80046b6 <_svfiprintf_r+0x182>
 80046d4:	ab03      	add	r3, sp, #12
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	4622      	mov	r2, r4
 80046da:	4b11      	ldr	r3, [pc, #68]	; (8004720 <_svfiprintf_r+0x1ec>)
 80046dc:	a904      	add	r1, sp, #16
 80046de:	4640      	mov	r0, r8
 80046e0:	f3af 8000 	nop.w
 80046e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80046e8:	4681      	mov	r9, r0
 80046ea:	d1d6      	bne.n	800469a <_svfiprintf_r+0x166>
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	065b      	lsls	r3, r3, #25
 80046f0:	f53f af35 	bmi.w	800455e <_svfiprintf_r+0x2a>
 80046f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046f6:	b01d      	add	sp, #116	; 0x74
 80046f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fc:	ab03      	add	r3, sp, #12
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	4622      	mov	r2, r4
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <_svfiprintf_r+0x1ec>)
 8004704:	a904      	add	r1, sp, #16
 8004706:	4640      	mov	r0, r8
 8004708:	f000 f882 	bl	8004810 <_printf_i>
 800470c:	e7ea      	b.n	80046e4 <_svfiprintf_r+0x1b0>
 800470e:	bf00      	nop
 8004710:	08004d2e 	.word	0x08004d2e
 8004714:	08004d34 	.word	0x08004d34
 8004718:	08004d38 	.word	0x08004d38
 800471c:	00000000 	.word	0x00000000
 8004720:	0800447f 	.word	0x0800447f

08004724 <_printf_common>:
 8004724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004728:	4691      	mov	r9, r2
 800472a:	461f      	mov	r7, r3
 800472c:	688a      	ldr	r2, [r1, #8]
 800472e:	690b      	ldr	r3, [r1, #16]
 8004730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004734:	4293      	cmp	r3, r2
 8004736:	bfb8      	it	lt
 8004738:	4613      	movlt	r3, r2
 800473a:	f8c9 3000 	str.w	r3, [r9]
 800473e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004742:	4606      	mov	r6, r0
 8004744:	460c      	mov	r4, r1
 8004746:	b112      	cbz	r2, 800474e <_printf_common+0x2a>
 8004748:	3301      	adds	r3, #1
 800474a:	f8c9 3000 	str.w	r3, [r9]
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	0699      	lsls	r1, r3, #26
 8004752:	bf42      	ittt	mi
 8004754:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004758:	3302      	addmi	r3, #2
 800475a:	f8c9 3000 	strmi.w	r3, [r9]
 800475e:	6825      	ldr	r5, [r4, #0]
 8004760:	f015 0506 	ands.w	r5, r5, #6
 8004764:	d107      	bne.n	8004776 <_printf_common+0x52>
 8004766:	f104 0a19 	add.w	sl, r4, #25
 800476a:	68e3      	ldr	r3, [r4, #12]
 800476c:	f8d9 2000 	ldr.w	r2, [r9]
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	42ab      	cmp	r3, r5
 8004774:	dc28      	bgt.n	80047c8 <_printf_common+0xa4>
 8004776:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	3300      	adds	r3, #0
 800477e:	bf18      	it	ne
 8004780:	2301      	movne	r3, #1
 8004782:	0692      	lsls	r2, r2, #26
 8004784:	d42d      	bmi.n	80047e2 <_printf_common+0xbe>
 8004786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800478a:	4639      	mov	r1, r7
 800478c:	4630      	mov	r0, r6
 800478e:	47c0      	blx	r8
 8004790:	3001      	adds	r0, #1
 8004792:	d020      	beq.n	80047d6 <_printf_common+0xb2>
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	68e5      	ldr	r5, [r4, #12]
 8004798:	f8d9 2000 	ldr.w	r2, [r9]
 800479c:	f003 0306 	and.w	r3, r3, #6
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	bf08      	it	eq
 80047a4:	1aad      	subeq	r5, r5, r2
 80047a6:	68a3      	ldr	r3, [r4, #8]
 80047a8:	6922      	ldr	r2, [r4, #16]
 80047aa:	bf0c      	ite	eq
 80047ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047b0:	2500      	movne	r5, #0
 80047b2:	4293      	cmp	r3, r2
 80047b4:	bfc4      	itt	gt
 80047b6:	1a9b      	subgt	r3, r3, r2
 80047b8:	18ed      	addgt	r5, r5, r3
 80047ba:	f04f 0900 	mov.w	r9, #0
 80047be:	341a      	adds	r4, #26
 80047c0:	454d      	cmp	r5, r9
 80047c2:	d11a      	bne.n	80047fa <_printf_common+0xd6>
 80047c4:	2000      	movs	r0, #0
 80047c6:	e008      	b.n	80047da <_printf_common+0xb6>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4652      	mov	r2, sl
 80047cc:	4639      	mov	r1, r7
 80047ce:	4630      	mov	r0, r6
 80047d0:	47c0      	blx	r8
 80047d2:	3001      	adds	r0, #1
 80047d4:	d103      	bne.n	80047de <_printf_common+0xba>
 80047d6:	f04f 30ff 	mov.w	r0, #4294967295
 80047da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047de:	3501      	adds	r5, #1
 80047e0:	e7c3      	b.n	800476a <_printf_common+0x46>
 80047e2:	18e1      	adds	r1, r4, r3
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	2030      	movs	r0, #48	; 0x30
 80047e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ec:	4422      	add	r2, r4
 80047ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047f6:	3302      	adds	r3, #2
 80047f8:	e7c5      	b.n	8004786 <_printf_common+0x62>
 80047fa:	2301      	movs	r3, #1
 80047fc:	4622      	mov	r2, r4
 80047fe:	4639      	mov	r1, r7
 8004800:	4630      	mov	r0, r6
 8004802:	47c0      	blx	r8
 8004804:	3001      	adds	r0, #1
 8004806:	d0e6      	beq.n	80047d6 <_printf_common+0xb2>
 8004808:	f109 0901 	add.w	r9, r9, #1
 800480c:	e7d8      	b.n	80047c0 <_printf_common+0x9c>
	...

08004810 <_printf_i>:
 8004810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004814:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004818:	460c      	mov	r4, r1
 800481a:	7e09      	ldrb	r1, [r1, #24]
 800481c:	b085      	sub	sp, #20
 800481e:	296e      	cmp	r1, #110	; 0x6e
 8004820:	4617      	mov	r7, r2
 8004822:	4606      	mov	r6, r0
 8004824:	4698      	mov	r8, r3
 8004826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004828:	f000 80b3 	beq.w	8004992 <_printf_i+0x182>
 800482c:	d822      	bhi.n	8004874 <_printf_i+0x64>
 800482e:	2963      	cmp	r1, #99	; 0x63
 8004830:	d036      	beq.n	80048a0 <_printf_i+0x90>
 8004832:	d80a      	bhi.n	800484a <_printf_i+0x3a>
 8004834:	2900      	cmp	r1, #0
 8004836:	f000 80b9 	beq.w	80049ac <_printf_i+0x19c>
 800483a:	2958      	cmp	r1, #88	; 0x58
 800483c:	f000 8083 	beq.w	8004946 <_printf_i+0x136>
 8004840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004844:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004848:	e032      	b.n	80048b0 <_printf_i+0xa0>
 800484a:	2964      	cmp	r1, #100	; 0x64
 800484c:	d001      	beq.n	8004852 <_printf_i+0x42>
 800484e:	2969      	cmp	r1, #105	; 0x69
 8004850:	d1f6      	bne.n	8004840 <_printf_i+0x30>
 8004852:	6820      	ldr	r0, [r4, #0]
 8004854:	6813      	ldr	r3, [r2, #0]
 8004856:	0605      	lsls	r5, r0, #24
 8004858:	f103 0104 	add.w	r1, r3, #4
 800485c:	d52a      	bpl.n	80048b4 <_printf_i+0xa4>
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6011      	str	r1, [r2, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	da03      	bge.n	800486e <_printf_i+0x5e>
 8004866:	222d      	movs	r2, #45	; 0x2d
 8004868:	425b      	negs	r3, r3
 800486a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800486e:	486f      	ldr	r0, [pc, #444]	; (8004a2c <_printf_i+0x21c>)
 8004870:	220a      	movs	r2, #10
 8004872:	e039      	b.n	80048e8 <_printf_i+0xd8>
 8004874:	2973      	cmp	r1, #115	; 0x73
 8004876:	f000 809d 	beq.w	80049b4 <_printf_i+0x1a4>
 800487a:	d808      	bhi.n	800488e <_printf_i+0x7e>
 800487c:	296f      	cmp	r1, #111	; 0x6f
 800487e:	d020      	beq.n	80048c2 <_printf_i+0xb2>
 8004880:	2970      	cmp	r1, #112	; 0x70
 8004882:	d1dd      	bne.n	8004840 <_printf_i+0x30>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	f043 0320 	orr.w	r3, r3, #32
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	e003      	b.n	8004896 <_printf_i+0x86>
 800488e:	2975      	cmp	r1, #117	; 0x75
 8004890:	d017      	beq.n	80048c2 <_printf_i+0xb2>
 8004892:	2978      	cmp	r1, #120	; 0x78
 8004894:	d1d4      	bne.n	8004840 <_printf_i+0x30>
 8004896:	2378      	movs	r3, #120	; 0x78
 8004898:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800489c:	4864      	ldr	r0, [pc, #400]	; (8004a30 <_printf_i+0x220>)
 800489e:	e055      	b.n	800494c <_printf_i+0x13c>
 80048a0:	6813      	ldr	r3, [r2, #0]
 80048a2:	1d19      	adds	r1, r3, #4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6011      	str	r1, [r2, #0]
 80048a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048b0:	2301      	movs	r3, #1
 80048b2:	e08c      	b.n	80049ce <_printf_i+0x1be>
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6011      	str	r1, [r2, #0]
 80048b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048bc:	bf18      	it	ne
 80048be:	b21b      	sxthne	r3, r3
 80048c0:	e7cf      	b.n	8004862 <_printf_i+0x52>
 80048c2:	6813      	ldr	r3, [r2, #0]
 80048c4:	6825      	ldr	r5, [r4, #0]
 80048c6:	1d18      	adds	r0, r3, #4
 80048c8:	6010      	str	r0, [r2, #0]
 80048ca:	0628      	lsls	r0, r5, #24
 80048cc:	d501      	bpl.n	80048d2 <_printf_i+0xc2>
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	e002      	b.n	80048d8 <_printf_i+0xc8>
 80048d2:	0668      	lsls	r0, r5, #25
 80048d4:	d5fb      	bpl.n	80048ce <_printf_i+0xbe>
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	4854      	ldr	r0, [pc, #336]	; (8004a2c <_printf_i+0x21c>)
 80048da:	296f      	cmp	r1, #111	; 0x6f
 80048dc:	bf14      	ite	ne
 80048de:	220a      	movne	r2, #10
 80048e0:	2208      	moveq	r2, #8
 80048e2:	2100      	movs	r1, #0
 80048e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048e8:	6865      	ldr	r5, [r4, #4]
 80048ea:	60a5      	str	r5, [r4, #8]
 80048ec:	2d00      	cmp	r5, #0
 80048ee:	f2c0 8095 	blt.w	8004a1c <_printf_i+0x20c>
 80048f2:	6821      	ldr	r1, [r4, #0]
 80048f4:	f021 0104 	bic.w	r1, r1, #4
 80048f8:	6021      	str	r1, [r4, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d13d      	bne.n	800497a <_printf_i+0x16a>
 80048fe:	2d00      	cmp	r5, #0
 8004900:	f040 808e 	bne.w	8004a20 <_printf_i+0x210>
 8004904:	4665      	mov	r5, ip
 8004906:	2a08      	cmp	r2, #8
 8004908:	d10b      	bne.n	8004922 <_printf_i+0x112>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	07db      	lsls	r3, r3, #31
 800490e:	d508      	bpl.n	8004922 <_printf_i+0x112>
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	6862      	ldr	r2, [r4, #4]
 8004914:	429a      	cmp	r2, r3
 8004916:	bfde      	ittt	le
 8004918:	2330      	movle	r3, #48	; 0x30
 800491a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800491e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004922:	ebac 0305 	sub.w	r3, ip, r5
 8004926:	6123      	str	r3, [r4, #16]
 8004928:	f8cd 8000 	str.w	r8, [sp]
 800492c:	463b      	mov	r3, r7
 800492e:	aa03      	add	r2, sp, #12
 8004930:	4621      	mov	r1, r4
 8004932:	4630      	mov	r0, r6
 8004934:	f7ff fef6 	bl	8004724 <_printf_common>
 8004938:	3001      	adds	r0, #1
 800493a:	d14d      	bne.n	80049d8 <_printf_i+0x1c8>
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	b005      	add	sp, #20
 8004942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004946:	4839      	ldr	r0, [pc, #228]	; (8004a2c <_printf_i+0x21c>)
 8004948:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800494c:	6813      	ldr	r3, [r2, #0]
 800494e:	6821      	ldr	r1, [r4, #0]
 8004950:	1d1d      	adds	r5, r3, #4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6015      	str	r5, [r2, #0]
 8004956:	060a      	lsls	r2, r1, #24
 8004958:	d50b      	bpl.n	8004972 <_printf_i+0x162>
 800495a:	07ca      	lsls	r2, r1, #31
 800495c:	bf44      	itt	mi
 800495e:	f041 0120 	orrmi.w	r1, r1, #32
 8004962:	6021      	strmi	r1, [r4, #0]
 8004964:	b91b      	cbnz	r3, 800496e <_printf_i+0x15e>
 8004966:	6822      	ldr	r2, [r4, #0]
 8004968:	f022 0220 	bic.w	r2, r2, #32
 800496c:	6022      	str	r2, [r4, #0]
 800496e:	2210      	movs	r2, #16
 8004970:	e7b7      	b.n	80048e2 <_printf_i+0xd2>
 8004972:	064d      	lsls	r5, r1, #25
 8004974:	bf48      	it	mi
 8004976:	b29b      	uxthmi	r3, r3
 8004978:	e7ef      	b.n	800495a <_printf_i+0x14a>
 800497a:	4665      	mov	r5, ip
 800497c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004980:	fb02 3311 	mls	r3, r2, r1, r3
 8004984:	5cc3      	ldrb	r3, [r0, r3]
 8004986:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800498a:	460b      	mov	r3, r1
 800498c:	2900      	cmp	r1, #0
 800498e:	d1f5      	bne.n	800497c <_printf_i+0x16c>
 8004990:	e7b9      	b.n	8004906 <_printf_i+0xf6>
 8004992:	6813      	ldr	r3, [r2, #0]
 8004994:	6825      	ldr	r5, [r4, #0]
 8004996:	6961      	ldr	r1, [r4, #20]
 8004998:	1d18      	adds	r0, r3, #4
 800499a:	6010      	str	r0, [r2, #0]
 800499c:	0628      	lsls	r0, r5, #24
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	d501      	bpl.n	80049a6 <_printf_i+0x196>
 80049a2:	6019      	str	r1, [r3, #0]
 80049a4:	e002      	b.n	80049ac <_printf_i+0x19c>
 80049a6:	066a      	lsls	r2, r5, #25
 80049a8:	d5fb      	bpl.n	80049a2 <_printf_i+0x192>
 80049aa:	8019      	strh	r1, [r3, #0]
 80049ac:	2300      	movs	r3, #0
 80049ae:	6123      	str	r3, [r4, #16]
 80049b0:	4665      	mov	r5, ip
 80049b2:	e7b9      	b.n	8004928 <_printf_i+0x118>
 80049b4:	6813      	ldr	r3, [r2, #0]
 80049b6:	1d19      	adds	r1, r3, #4
 80049b8:	6011      	str	r1, [r2, #0]
 80049ba:	681d      	ldr	r5, [r3, #0]
 80049bc:	6862      	ldr	r2, [r4, #4]
 80049be:	2100      	movs	r1, #0
 80049c0:	4628      	mov	r0, r5
 80049c2:	f7fb fc15 	bl	80001f0 <memchr>
 80049c6:	b108      	cbz	r0, 80049cc <_printf_i+0x1bc>
 80049c8:	1b40      	subs	r0, r0, r5
 80049ca:	6060      	str	r0, [r4, #4]
 80049cc:	6863      	ldr	r3, [r4, #4]
 80049ce:	6123      	str	r3, [r4, #16]
 80049d0:	2300      	movs	r3, #0
 80049d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d6:	e7a7      	b.n	8004928 <_printf_i+0x118>
 80049d8:	6923      	ldr	r3, [r4, #16]
 80049da:	462a      	mov	r2, r5
 80049dc:	4639      	mov	r1, r7
 80049de:	4630      	mov	r0, r6
 80049e0:	47c0      	blx	r8
 80049e2:	3001      	adds	r0, #1
 80049e4:	d0aa      	beq.n	800493c <_printf_i+0x12c>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	079b      	lsls	r3, r3, #30
 80049ea:	d413      	bmi.n	8004a14 <_printf_i+0x204>
 80049ec:	68e0      	ldr	r0, [r4, #12]
 80049ee:	9b03      	ldr	r3, [sp, #12]
 80049f0:	4298      	cmp	r0, r3
 80049f2:	bfb8      	it	lt
 80049f4:	4618      	movlt	r0, r3
 80049f6:	e7a3      	b.n	8004940 <_printf_i+0x130>
 80049f8:	2301      	movs	r3, #1
 80049fa:	464a      	mov	r2, r9
 80049fc:	4639      	mov	r1, r7
 80049fe:	4630      	mov	r0, r6
 8004a00:	47c0      	blx	r8
 8004a02:	3001      	adds	r0, #1
 8004a04:	d09a      	beq.n	800493c <_printf_i+0x12c>
 8004a06:	3501      	adds	r5, #1
 8004a08:	68e3      	ldr	r3, [r4, #12]
 8004a0a:	9a03      	ldr	r2, [sp, #12]
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	42ab      	cmp	r3, r5
 8004a10:	dcf2      	bgt.n	80049f8 <_printf_i+0x1e8>
 8004a12:	e7eb      	b.n	80049ec <_printf_i+0x1dc>
 8004a14:	2500      	movs	r5, #0
 8004a16:	f104 0919 	add.w	r9, r4, #25
 8004a1a:	e7f5      	b.n	8004a08 <_printf_i+0x1f8>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ac      	bne.n	800497a <_printf_i+0x16a>
 8004a20:	7803      	ldrb	r3, [r0, #0]
 8004a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a2a:	e76c      	b.n	8004906 <_printf_i+0xf6>
 8004a2c:	08004d3f 	.word	0x08004d3f
 8004a30:	08004d50 	.word	0x08004d50

08004a34 <__ascii_wctomb>:
 8004a34:	b149      	cbz	r1, 8004a4a <__ascii_wctomb+0x16>
 8004a36:	2aff      	cmp	r2, #255	; 0xff
 8004a38:	bf85      	ittet	hi
 8004a3a:	238a      	movhi	r3, #138	; 0x8a
 8004a3c:	6003      	strhi	r3, [r0, #0]
 8004a3e:	700a      	strbls	r2, [r1, #0]
 8004a40:	f04f 30ff 	movhi.w	r0, #4294967295
 8004a44:	bf98      	it	ls
 8004a46:	2001      	movls	r0, #1
 8004a48:	4770      	bx	lr
 8004a4a:	4608      	mov	r0, r1
 8004a4c:	4770      	bx	lr

08004a4e <memcpy>:
 8004a4e:	b510      	push	{r4, lr}
 8004a50:	1e43      	subs	r3, r0, #1
 8004a52:	440a      	add	r2, r1
 8004a54:	4291      	cmp	r1, r2
 8004a56:	d100      	bne.n	8004a5a <memcpy+0xc>
 8004a58:	bd10      	pop	{r4, pc}
 8004a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a62:	e7f7      	b.n	8004a54 <memcpy+0x6>

08004a64 <memmove>:
 8004a64:	4288      	cmp	r0, r1
 8004a66:	b510      	push	{r4, lr}
 8004a68:	eb01 0302 	add.w	r3, r1, r2
 8004a6c:	d807      	bhi.n	8004a7e <memmove+0x1a>
 8004a6e:	1e42      	subs	r2, r0, #1
 8004a70:	4299      	cmp	r1, r3
 8004a72:	d00a      	beq.n	8004a8a <memmove+0x26>
 8004a74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a78:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a7c:	e7f8      	b.n	8004a70 <memmove+0xc>
 8004a7e:	4283      	cmp	r3, r0
 8004a80:	d9f5      	bls.n	8004a6e <memmove+0xa>
 8004a82:	1881      	adds	r1, r0, r2
 8004a84:	1ad2      	subs	r2, r2, r3
 8004a86:	42d3      	cmn	r3, r2
 8004a88:	d100      	bne.n	8004a8c <memmove+0x28>
 8004a8a:	bd10      	pop	{r4, pc}
 8004a8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a94:	e7f7      	b.n	8004a86 <memmove+0x22>
	...

08004a98 <_free_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	2900      	cmp	r1, #0
 8004a9e:	d045      	beq.n	8004b2c <_free_r+0x94>
 8004aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aa4:	1f0c      	subs	r4, r1, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bfb8      	it	lt
 8004aaa:	18e4      	addlt	r4, r4, r3
 8004aac:	f000 f8d2 	bl	8004c54 <__malloc_lock>
 8004ab0:	4a1f      	ldr	r2, [pc, #124]	; (8004b30 <_free_r+0x98>)
 8004ab2:	6813      	ldr	r3, [r2, #0]
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	b933      	cbnz	r3, 8004ac6 <_free_r+0x2e>
 8004ab8:	6063      	str	r3, [r4, #4]
 8004aba:	6014      	str	r4, [r2, #0]
 8004abc:	4628      	mov	r0, r5
 8004abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ac2:	f000 b8c8 	b.w	8004c56 <__malloc_unlock>
 8004ac6:	42a3      	cmp	r3, r4
 8004ac8:	d90c      	bls.n	8004ae4 <_free_r+0x4c>
 8004aca:	6821      	ldr	r1, [r4, #0]
 8004acc:	1862      	adds	r2, r4, r1
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	bf04      	itt	eq
 8004ad2:	681a      	ldreq	r2, [r3, #0]
 8004ad4:	685b      	ldreq	r3, [r3, #4]
 8004ad6:	6063      	str	r3, [r4, #4]
 8004ad8:	bf04      	itt	eq
 8004ada:	1852      	addeq	r2, r2, r1
 8004adc:	6022      	streq	r2, [r4, #0]
 8004ade:	6004      	str	r4, [r0, #0]
 8004ae0:	e7ec      	b.n	8004abc <_free_r+0x24>
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	b10a      	cbz	r2, 8004aec <_free_r+0x54>
 8004ae8:	42a2      	cmp	r2, r4
 8004aea:	d9fa      	bls.n	8004ae2 <_free_r+0x4a>
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	1858      	adds	r0, r3, r1
 8004af0:	42a0      	cmp	r0, r4
 8004af2:	d10b      	bne.n	8004b0c <_free_r+0x74>
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	4401      	add	r1, r0
 8004af8:	1858      	adds	r0, r3, r1
 8004afa:	4282      	cmp	r2, r0
 8004afc:	6019      	str	r1, [r3, #0]
 8004afe:	d1dd      	bne.n	8004abc <_free_r+0x24>
 8004b00:	6810      	ldr	r0, [r2, #0]
 8004b02:	6852      	ldr	r2, [r2, #4]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	4401      	add	r1, r0
 8004b08:	6019      	str	r1, [r3, #0]
 8004b0a:	e7d7      	b.n	8004abc <_free_r+0x24>
 8004b0c:	d902      	bls.n	8004b14 <_free_r+0x7c>
 8004b0e:	230c      	movs	r3, #12
 8004b10:	602b      	str	r3, [r5, #0]
 8004b12:	e7d3      	b.n	8004abc <_free_r+0x24>
 8004b14:	6820      	ldr	r0, [r4, #0]
 8004b16:	1821      	adds	r1, r4, r0
 8004b18:	428a      	cmp	r2, r1
 8004b1a:	bf04      	itt	eq
 8004b1c:	6811      	ldreq	r1, [r2, #0]
 8004b1e:	6852      	ldreq	r2, [r2, #4]
 8004b20:	6062      	str	r2, [r4, #4]
 8004b22:	bf04      	itt	eq
 8004b24:	1809      	addeq	r1, r1, r0
 8004b26:	6021      	streq	r1, [r4, #0]
 8004b28:	605c      	str	r4, [r3, #4]
 8004b2a:	e7c7      	b.n	8004abc <_free_r+0x24>
 8004b2c:	bd38      	pop	{r3, r4, r5, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000200 	.word	0x20000200

08004b34 <_malloc_r>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	1ccd      	adds	r5, r1, #3
 8004b38:	f025 0503 	bic.w	r5, r5, #3
 8004b3c:	3508      	adds	r5, #8
 8004b3e:	2d0c      	cmp	r5, #12
 8004b40:	bf38      	it	cc
 8004b42:	250c      	movcc	r5, #12
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	4606      	mov	r6, r0
 8004b48:	db01      	blt.n	8004b4e <_malloc_r+0x1a>
 8004b4a:	42a9      	cmp	r1, r5
 8004b4c:	d903      	bls.n	8004b56 <_malloc_r+0x22>
 8004b4e:	230c      	movs	r3, #12
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	2000      	movs	r0, #0
 8004b54:	bd70      	pop	{r4, r5, r6, pc}
 8004b56:	f000 f87d 	bl	8004c54 <__malloc_lock>
 8004b5a:	4a21      	ldr	r2, [pc, #132]	; (8004be0 <_malloc_r+0xac>)
 8004b5c:	6814      	ldr	r4, [r2, #0]
 8004b5e:	4621      	mov	r1, r4
 8004b60:	b991      	cbnz	r1, 8004b88 <_malloc_r+0x54>
 8004b62:	4c20      	ldr	r4, [pc, #128]	; (8004be4 <_malloc_r+0xb0>)
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	b91b      	cbnz	r3, 8004b70 <_malloc_r+0x3c>
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f000 f863 	bl	8004c34 <_sbrk_r>
 8004b6e:	6020      	str	r0, [r4, #0]
 8004b70:	4629      	mov	r1, r5
 8004b72:	4630      	mov	r0, r6
 8004b74:	f000 f85e 	bl	8004c34 <_sbrk_r>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d124      	bne.n	8004bc6 <_malloc_r+0x92>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	6033      	str	r3, [r6, #0]
 8004b80:	4630      	mov	r0, r6
 8004b82:	f000 f868 	bl	8004c56 <__malloc_unlock>
 8004b86:	e7e4      	b.n	8004b52 <_malloc_r+0x1e>
 8004b88:	680b      	ldr	r3, [r1, #0]
 8004b8a:	1b5b      	subs	r3, r3, r5
 8004b8c:	d418      	bmi.n	8004bc0 <_malloc_r+0x8c>
 8004b8e:	2b0b      	cmp	r3, #11
 8004b90:	d90f      	bls.n	8004bb2 <_malloc_r+0x7e>
 8004b92:	600b      	str	r3, [r1, #0]
 8004b94:	50cd      	str	r5, [r1, r3]
 8004b96:	18cc      	adds	r4, r1, r3
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f000 f85c 	bl	8004c56 <__malloc_unlock>
 8004b9e:	f104 000b 	add.w	r0, r4, #11
 8004ba2:	1d23      	adds	r3, r4, #4
 8004ba4:	f020 0007 	bic.w	r0, r0, #7
 8004ba8:	1ac3      	subs	r3, r0, r3
 8004baa:	d0d3      	beq.n	8004b54 <_malloc_r+0x20>
 8004bac:	425a      	negs	r2, r3
 8004bae:	50e2      	str	r2, [r4, r3]
 8004bb0:	e7d0      	b.n	8004b54 <_malloc_r+0x20>
 8004bb2:	428c      	cmp	r4, r1
 8004bb4:	684b      	ldr	r3, [r1, #4]
 8004bb6:	bf16      	itet	ne
 8004bb8:	6063      	strne	r3, [r4, #4]
 8004bba:	6013      	streq	r3, [r2, #0]
 8004bbc:	460c      	movne	r4, r1
 8004bbe:	e7eb      	b.n	8004b98 <_malloc_r+0x64>
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	6849      	ldr	r1, [r1, #4]
 8004bc4:	e7cc      	b.n	8004b60 <_malloc_r+0x2c>
 8004bc6:	1cc4      	adds	r4, r0, #3
 8004bc8:	f024 0403 	bic.w	r4, r4, #3
 8004bcc:	42a0      	cmp	r0, r4
 8004bce:	d005      	beq.n	8004bdc <_malloc_r+0xa8>
 8004bd0:	1a21      	subs	r1, r4, r0
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f000 f82e 	bl	8004c34 <_sbrk_r>
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d0cf      	beq.n	8004b7c <_malloc_r+0x48>
 8004bdc:	6025      	str	r5, [r4, #0]
 8004bde:	e7db      	b.n	8004b98 <_malloc_r+0x64>
 8004be0:	20000200 	.word	0x20000200
 8004be4:	20000204 	.word	0x20000204

08004be8 <_realloc_r>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	4607      	mov	r7, r0
 8004bec:	4614      	mov	r4, r2
 8004bee:	460e      	mov	r6, r1
 8004bf0:	b921      	cbnz	r1, 8004bfc <_realloc_r+0x14>
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bf8:	f7ff bf9c 	b.w	8004b34 <_malloc_r>
 8004bfc:	b922      	cbnz	r2, 8004c08 <_realloc_r+0x20>
 8004bfe:	f7ff ff4b 	bl	8004a98 <_free_r>
 8004c02:	4625      	mov	r5, r4
 8004c04:	4628      	mov	r0, r5
 8004c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c08:	f000 f826 	bl	8004c58 <_malloc_usable_size_r>
 8004c0c:	42a0      	cmp	r0, r4
 8004c0e:	d20f      	bcs.n	8004c30 <_realloc_r+0x48>
 8004c10:	4621      	mov	r1, r4
 8004c12:	4638      	mov	r0, r7
 8004c14:	f7ff ff8e 	bl	8004b34 <_malloc_r>
 8004c18:	4605      	mov	r5, r0
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d0f2      	beq.n	8004c04 <_realloc_r+0x1c>
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4622      	mov	r2, r4
 8004c22:	f7ff ff14 	bl	8004a4e <memcpy>
 8004c26:	4631      	mov	r1, r6
 8004c28:	4638      	mov	r0, r7
 8004c2a:	f7ff ff35 	bl	8004a98 <_free_r>
 8004c2e:	e7e9      	b.n	8004c04 <_realloc_r+0x1c>
 8004c30:	4635      	mov	r5, r6
 8004c32:	e7e7      	b.n	8004c04 <_realloc_r+0x1c>

08004c34 <_sbrk_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4c06      	ldr	r4, [pc, #24]	; (8004c50 <_sbrk_r+0x1c>)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	6023      	str	r3, [r4, #0]
 8004c40:	f7fc f9ca 	bl	8000fd8 <_sbrk>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_sbrk_r+0x1a>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_sbrk_r+0x1a>
 8004c4c:	602b      	str	r3, [r5, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	2000039c 	.word	0x2000039c

08004c54 <__malloc_lock>:
 8004c54:	4770      	bx	lr

08004c56 <__malloc_unlock>:
 8004c56:	4770      	bx	lr

08004c58 <_malloc_usable_size_r>:
 8004c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c5c:	1f18      	subs	r0, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bfbc      	itt	lt
 8004c62:	580b      	ldrlt	r3, [r1, r0]
 8004c64:	18c0      	addlt	r0, r0, r3
 8004c66:	4770      	bx	lr

08004c68 <_init>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	bf00      	nop
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr

08004c74 <_fini>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	bf00      	nop
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr
